.libPaths("C:/Rpackages/R/win-library/4.1") # (elise setting package library location)
library("splus2R")
library('LaplacesDemon')
load("G:/.shortcut-targets-by-id/1FPlPAVacVgAROSPXMiiOGb2Takzm2241/PJ_Photo/cover_spread/Scripts/data_prepped.RData")
load("G:/.shortcut-targets-by-id/1FPlPAVacVgAROSPXMiiOGb2Takzm2241/PJ_Photo/cover_spread/Scripts/Sampler/sampler_output_worskpace_files/sampler_base_v1.RData")
#------------------- Inspect model convergence ----------------------
burnin = .5*Niter
burnin
# trace plot
par(mfrow = c(2, 3))
plot(tauOut[burnin:Niter], type = "l", xlab = "Iteration",
col = "chartreuse4", ylab = expression(tau), na.rm = T)
# trace plot
par(mfrow = c(2, 3))
plot(tauOut[burnin:Niter], type = "l", xlab = "Iteration",
col = "chartreuse4", ylab = expression(tau), na.rm = T)
abline(h = mean(tauOut[burnin:Niter]), col = "red")
plot(betaOut[burnin:Niter,1], type = "l", xlab = "Iteration",
col = "chartreuse4", ylab = expression(alpha), na.rm = T)
abline(h = mean(betaOut[burnin:Niter,1]), col = "red")
plot(betaOut[burnin:Niter,2], type = "l", xlab = "Iteration",
col = "chartreuse4", ylab = expression(alpha), na.rm = T)
abline(h = mean(betaOut[burnin:Niter,2]), col = "red")
plot(sig.oOut[burnin:Niter], type = "l", xlab = "Iteration",
col = "chartreuse4", ylab = expression(sigma), na.rm = T)
abline(h = mean(sig.oOut[burnin:Niter]), col="red")
plot(sig.pOut[burnin:Niter], type = "l", xlab = "Iteration",
col = "chartreuse4", ylab = expression(sigma), na.rm = T)
abline(h = mean(sig.pOut[burnin:Niter]), col="red")
# density plots
densityPlots = function(data, x, n.iter, burnin){
par(mfrow = c(2, 2))
plot_density(p = x$alpha, v1 = data$gen.alpha,
v2 = data$nls.alpha, param = expression(alpha),
burnin = burnin, n.iter = n.iter)
plot_density(p = x$gamma, v1 = data$gen.gamma,
v2 = data$nls.gamma, param = expression(gamma),
burnin = burnin, n.iter = n.iter)
plot_density(p = x$c, v1 = data$gen.c, v2 = data$nls.c,
param = expression(c), burnin = burnin,
n.iter = n.iter)
plot_density(p = x$sigma, v1 = data$gen.sigma, v2 = data$nls.sigma,
param = expression(sigma),
burnin = burnin, n.iter = n.iter)
}
# trace plot
par(mfrow = c(2, 3))
plot(tauOut[burnin:Niter], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(tau), na.rm = T)
abline(h = mean(tauOut[burnin:Niter]), col = "#1c9099")
plot(betaOut[burnin:Niter,1], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(alpha), na.rm = T)
abline(h = mean(betaOut[burnin:Niter,1]), col = "#1c9099")
plot(betaOut[burnin:Niter,2], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(alpha), na.rm = T)
abline(h = mean(betaOut[burnin:Niter,2]), col = "#1c9099")
plot(sig.oOut[burnin:Niter], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(sigma), na.rm = T)
abline(h = mean(sig.oOut[burnin:Niter]), col="#1c9099")
plot(sig.pOut[burnin:Niter], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(sigma), na.rm = T)
abline(h = mean(sig.pOut[burnin:Niter]), col="#1c9099")
# trace plot
par(mfrow = c(2, 3))
plot(tauOut[burnin:Niter], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(tau))
abline(h = mean(tauOut[burnin:Niter]), col = "#1c9099")
plot(betaOut[burnin:Niter,1], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(beta1))
abline(h = mean(betaOut[burnin:Niter,1]), col = "#1c9099")
plot(betaOut[burnin:Niter,2], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(beta2))
abline(h = mean(betaOut[burnin:Niter,2]), col = "#1c9099")
plot(sig.oOut[burnin:Niter], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(sigma))
abline(h = mean(sig.oOut[burnin:Niter]), col="#1c9099")
plot(sig.pOut[burnin:Niter], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(sigma))
abline(h = mean(sig.pOut[burnin:Niter]), col="#1c9099")
# density plots
densityPlots = function(data, x, n.iter, burnin){
par(mfrow = c(2, 2))
plot_density(p = x$alpha, v1 = data$gen.alpha,
v2 = data$nls.alpha, param = expression(alpha),
burnin = burnin, n.iter = n.iter)
plot_density(p = x$gamma, v1 = data$gen.gamma,
v2 = data$nls.gamma, param = expression(gamma),
burnin = burnin, n.iter = n.iter)
plot_density(p = x$c, v1 = data$gen.c, v2 = data$nls.c,
param = expression(c), burnin = burnin,
n.iter = n.iter)
plot_density(p = x$sigma, v1 = data$gen.sigma, v2 = data$nls.sigma,
param = expression(sigma),
burnin = burnin, n.iter = n.iter)
}
View(betaOut)
betaOut[1,]
View(sig.oOut)
# trace plot
par(mfrow = c(2, 3))
plot(tauOut[burnin:Niter], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(tau))
abline(h = mean(tauOut[burnin:Niter]), col = "#1c9099")
plot(betaOut[burnin:Niter,1], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(beta[1]))
abline(h = mean(betaOut[burnin:Niter,1]), col = "#1c9099")
plot(betaOut[burnin:Niter,2], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(beta[2]))
abline(h = mean(betaOut[burnin:Niter,2]), col = "#1c9099")
plot(sig.oOut[burnin:Niter], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(sigma[o]))
abline(h = mean(sig.oOut[burnin:Niter]), col="#1c9099")
plot(sig.pOut[burnin:Niter], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(sigma[p]))
abline(h = mean(sig.pOut[burnin:Niter]), col="#1c9099")
# density plots
densityPlots = function(data, x, n.iter, burnin){
par(mfrow = c(2, 2))
plot_density(p = x$alpha, v1 = data$gen.alpha,
v2 = data$nls.alpha, param = expression(alpha),
burnin = burnin, n.iter = n.iter)
plot_density(p = x$gamma, v1 = data$gen.gamma,
v2 = data$nls.gamma, param = expression(gamma),
burnin = burnin, n.iter = n.iter)
plot_density(p = x$c, v1 = data$gen.c, v2 = data$nls.c,
param = expression(c), burnin = burnin,
n.iter = n.iter)
plot_density(p = x$sigma, v1 = data$gen.sigma, v2 = data$nls.sigma,
param = expression(sigma),
burnin = burnin, n.iter = n.iter)
}
# density plots
hist(tauOut[burnin:Niter], breaks = 40)
abline(v = mean(tauOut[burnin:Niter]), col = "red", lwd = 3)
# density plots
hist(tauOut[burnin:Niter], breaks = 40)
abline(v = mean(tauOut[burnin:Niter]), col = "#1c9099", lwd = 2)
# density plots
hist(tauOut[burnin:Niter], breaks = 40)
abline(v = mean(tauOut[burnin:Niter]), col = "#1c9099", lwd = 2, xlab = "")
# density plots
hist(tauOut[burnin:Niter], breaks = 40)
abline(v = mean(tauOut[burnin:Niter]), col = "#1c9099", lwd = 2, xlab = "", main = expression(tau))
# density plots
hist(tauOut[burnin:Niter], breaks = 40, xlab = "", main = expression(tau))
abline(v = mean(tauOut[burnin:Niter]), col = "#1c9099", lwd = 2)
# density plots
par(mfrow = c(2, 3))
#tau
hist(tauOut[burnin:Niter], breaks = 40, xlab = "", main = expression(tau))
abline(v = mean(tauOut[burnin:Niter]), col = "#1c9099", lwd = 2)
# beta 1
hist(betaOut[burnin:Niter,1], breaks = 40, xlab = "", main = expression(tau))
abline(v = mean(betaOut[burnin:Niter,1]), col = "#1c9099", lwd = 2)
# beta 2
hist(betaOut[burnin:Niter,2], breaks = 40, xlab = "", main = expression(tau))
abline(v = mean(betaOut[burnin:Niter,2]), col = "#1c9099", lwd = 2)
# sigma obs
hist(sig.oOut[burnin:Niter], breaks = 40, xlab = "", main = expression(tau))
abline(v = mean(sig.oOut[burnin:Niter]), col = "#1c9099", lwd = 2)
# sigma process
hist(sig.pOut[burnin:Niter], breaks = 40, xlab = "", main = expression(tau))
abline(v = mean(sig.pOut[burnin:Niter]), col = "#1c9099", lwd = 2)
# pull out parameter estimates with specified burnin
pars <- output %>% dplyr::select(c("tau", "a_int", "a.1", "a.2", "a.3", "b", "sigma")) # "a.1", "a.2", "a.3",
# density plots
par(mfrow = c(2, 3))
#tau
hist(tauOut[burnin:Niter], breaks = 40, xlab = "", main = expression(tau))
abline(v = mean(tauOut[burnin:Niter]), col = "#1c9099", lwd = 2)
# beta 1
hist(betaOut[burnin:Niter,1], breaks = 40, xlab = "", main = expression(beta[1]))
abline(v = mean(betaOut[burnin:Niter,1]), col = "#1c9099", lwd = 2)
# beta 2
hist(betaOut[burnin:Niter,2], breaks = 40, xlab = "", main = expression(beta[2]))
abline(v = mean(betaOut[burnin:Niter,2]), col = "#1c9099", lwd = 2)
# sigma obs
hist(sig.oOut[burnin:Niter], breaks = 40, xlab = "", main = expression(sigma[o]))
abline(v = mean(sig.oOut[burnin:Niter]), col = "#1c9099", lwd = 2)
# sigma process
hist(sig.pOut[burnin:Niter], breaks = 40, xlab = "", main = expression(sigma[p]))
abline(v = mean(sig.pOut[burnin:Niter]), col = "#1c9099", lwd = 2)
# trace plot
par(mfrow = c(2, 3))
#tau
plot(tauOut[burnin:Niter], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(tau))
abline(h = mean(tauOut[burnin:Niter]), col = "#1c9099")
# beta 1
plot(betaOut[burnin:Niter,1], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(beta[1]))
abline(h = mean(betaOut[burnin:Niter,1]), col = "#1c9099")
#beta 2
plot(betaOut[burnin:Niter,2], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(beta[2]))
abline(h = mean(betaOut[burnin:Niter,2]), col = "#1c9099")
# sigma obs
plot(sig.oOut[burnin:Niter], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(sigma[o]))
abline(h = mean(sig.oOut[burnin:Niter]), col="#1c9099")
# sigma process
plot(sig.pOut[burnin:Niter], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(sigma[p]))
abline(h = mean(sig.pOut[burnin:Niter]), col="#1c9099")
# density plots
par(mfrow = c(2, 3))
#------------------- Inspect model convergence ----------------------
burnin = 1
# trace plot
par(mfrow = c(2, 3))
#tau
plot(tauOut[burnin:Niter], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(tau))
abline(h = mean(tauOut[burnin:Niter]), col = "#1c9099")
# beta 1
plot(betaOut[burnin:Niter,1], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(beta[1]))
abline(h = mean(betaOut[burnin:Niter,1]), col = "#1c9099")
#beta 2
plot(betaOut[burnin:Niter,2], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(beta[2]))
abline(h = mean(betaOut[burnin:Niter,2]), col = "#1c9099")
# sigma obs
plot(sig.oOut[burnin:Niter], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(sigma[o]))
abline(h = mean(sig.oOut[burnin:Niter]), col="#1c9099")
# sigma process
plot(sig.pOut[burnin:Niter], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(sigma[p]))
abline(h = mean(sig.pOut[burnin:Niter]), col="#1c9099")
#------------------- Inspect model convergence ----------------------
burnin = .5*Niter
# trace plot
par(mfrow = c(2, 3))
#tau
plot(tauOut[burnin:Niter], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(tau))
abline(h = mean(tauOut[burnin:Niter]), col = "#1c9099")
# beta 1
plot(betaOut[burnin:Niter,1], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(beta[1]))
abline(h = mean(betaOut[burnin:Niter,1]), col = "#1c9099")
#beta 2
plot(betaOut[burnin:Niter,2], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(beta[2]))
abline(h = mean(betaOut[burnin:Niter,2]), col = "#1c9099")
# sigma obs
plot(sig.oOut[burnin:Niter], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(sigma[o]))
abline(h = mean(sig.oOut[burnin:Niter]), col="#1c9099")
# sigma process
plot(sig.pOut[burnin:Niter], type = "l", xlab = "Iteration",
col = "#a6bddb", ylab = expression(sigma[p]))
abline(h = mean(sig.pOut[burnin:Niter]), col="#1c9099")
# density plots
par(mfrow = c(2, 3))
#tau
hist(tauOut[burnin:Niter], breaks = 40, xlab = "", main = expression(tau))
abline(v = mean(tauOut[burnin:Niter]), col = "#1c9099", lwd = 2)
# beta 1
hist(betaOut[burnin:Niter,1], breaks = 40, xlab = "", main = expression(beta[1]))
abline(v = mean(betaOut[burnin:Niter,1]), col = "#1c9099", lwd = 2)
# beta 2
hist(betaOut[burnin:Niter,2], breaks = 40, xlab = "", main = expression(beta[2]))
abline(v = mean(betaOut[burnin:Niter,2]), col = "#1c9099", lwd = 2)
# sigma obs
hist(sig.oOut[burnin:Niter], breaks = 40, xlab = "", main = expression(sigma[o]))
abline(v = mean(sig.oOut[burnin:Niter]), col = "#1c9099", lwd = 2)
# sigma process
hist(sig.pOut[burnin:Niter], breaks = 40, xlab = "", main = expression(sigma[p]))
abline(v = mean(sig.pOut[burnin:Niter]), col = "#1c9099", lwd = 2)
# pull out parameter estimates with specified burnin
pars <- output %>% dplyr::select(c("tau", "a_int", "a.1", "a.2", "a.3", "b", "sigma")) # "a.1", "a.2", "a.3",
###Data####
N<-N[1:31,] # observed data, assumed to be a matrix that is year by pixel (remove last 5 years here)
tmax<-dim(N)[1]
pmax<-dim(N)[2]
D<-Dsq
#X<-if you have covariates this is where they go
bmax<-2 #length(X[1,]) number of covariates
###Starting Values###
Nlat<-N #Starting values for latent states is the observed data
beta0<-.01 ###Give beta some starting values based on what we know
beta1<-0.01
tau<-.1###Give tau a reasonable starting value.
sig.p<-.1##give sig.p reasonable starting values
o1<-sig.o<-1##give sig.o reasonable starting values
ro <- 0.5
qo1 <- (ro/o1)+1
Mint<-exp(-(D/tau))
M<-t(Mint/apply(Mint,1,sum))  ##calculate M starting M given Tau
Npred<-G<-matrix(NA,tmax,pmax)
for (t in 2:tmax){
G[t,]<-exp(beta0+beta1*Nlat[t-1,])
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
Niter<-20000 ###Number of interations. Keep in mind this will need to be more than you needed for stan
checkpoint=Niter*0.01
###Containers####
tauOut<-matrix(NA,Niter,)
betaOut<-matrix(NA,Niter,bmax)
NlatOut<-array(NA,c(tmax,93,Niter)) # change to 93 pixels
NlatOutLast<-matrix(NA,pmax,Niter)
rep.pix <- c(115:145, 910:940, 1865:1895) # representative pixels (high,med,low density)
sig.pOut<-sig.oOut<-matrix(NA,Niter,1)
accept.beta=accept.tau=0
accept.beta
accept.tau
accept.beta1=accept.beta0=accept.tau=0
accept.beta1
accept.beta0
#beta.tune=diag(c(.000001,.000001))
beta0.tune=.000001
beta1.tune=.000001
tau.tune=.001
sampleSigma<-function(Nlat,Npred,a,b){  ###This function will return variance. Need to sqrt to get SD
n<-length(c(Nlat))
tmp.a<-a+n/2
tmp.b<-b+(0.5*sum((Nlat-Npred)^2))
s2=rinvgamma(1,tmp.a,tmp.b)
}
sampleObS<-function(Nlat,N,a,b){  ###This function will return variance. Need to sqrt to get SD
n<-length(c(Nlat))
tmp.a<-a+n/2
tmp.b<-b+(0.5*sum((N-Nlat)^2,na.rm=T))
return(rinvgamma(1,tmp.a,tmp.b))
}
sampleLatent<-function(Npred,Nlat,N,G,M,Minv,sig.o,sig.p,tmax) {
###This function sequentially adds info from the different data sources to inform latent state
#zero out
s2<-sig.p^2
o1<-sig.o^2
Vi=0
v=0
#1. Contribution of Observations
Vi=1/o1
v=(N[t,]/o1)
#2. Contribution of previous time step. Not included if we are in the first time step
if(t>1){
mu1<-M%*%(diag(G[t,])%*%Nlat[t-1,])
Vi=Vi+1/s2
v=v+mu1/s2
}
#2. Contribution of previous time step
# should fix G to be matrix
if(t<tmax){
mu2<-Minv%*%(diag(1/G[t+1,])%*%Nlat[t+1,]) ####Here y is arranged year by pixel and X is year by pixel by covariate
Vi=Vi+1/s2
v=v+mu2/s2
}
V<-1/Vi
Nlat_t<-rnorm(length(v),c(V*v),sqrt(V))
return(Nlat_t)
}
UpdateBeta<-function(tmax,b0, b1,Nlat,M,p){ # add X and C to list of arguments
Npred<-matrix(NA,tmax,p)
G<-matrix(NA,tmax,p)
for (t in 2:tmax){
G[t,]<-exp(b0+b1*Nlat[t-1,])
#G[t,]<-exp((b0+X[t,,]*C)+b[1]*Nlat[t-1,])
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
return(list(Npred=Npred,G=G))
}
UpdateDispersal<-function(tmax,tau,Nlat,G,p,D){
Npred<-matrix(NA,tmax,p)
Mint<-exp(-(D/tau))
M<-t(Mint/apply(Mint,1,sum))
for (t in 2:tmax){
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
return(list(Npred=Npred,M=M))
}
View(Npred)
