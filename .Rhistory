mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta0=beta0.star
accept.beta0=accept.beta0+1
}
betaOut[i,1]<-beta0
# density dependent param
beta1.star=rnorm(1,beta1,beta1.tune)
Out=UpdateBetaToCl(tmax=tmax,b0=beta0,b1=beta1.star,X=X,gamma0=gam0,gamma1=gam1,gamma2=gam2,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBetaToCl(tmax=tmax,b0=beta0,b1=beta1,X=X,gamma0=gam0,gamma1=gam1,gamma2=gam2,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta1=beta1.star
accept.beta1=accept.beta1+1
}
betaOut[i,2]<-beta1
#vpdmax regression coef
gam0.star=rnorm(1,gam0,gam0.tune)
Out=UpdateBetaToCl(tmax=tmax,b0=beta0,b1=beta1,X=X,gamma0=gam0.star,gamma1=gam1,gamma2=gam2,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBetaToCl(tmax=tmax,b0=beta0,b1=beta1,X=X,gamma0=gam0,gamma1=gam1,gamma2=gam2,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
gam0=gam0.star
accept.gam0=accept.gam0+1
}
gammaOut[i,1]<-gam0
#heatload regression coef
gam1.star=rnorm(1,gam1,gam1.tune)
Out=UpdateBetaToCl(tmax=tmax,b0=beta0,b1=beta1,X=X,gamma0=gam0,gamma1=gam1.star,gamma2=gam2,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBetaToCl(tmax=tmax,b0=beta0,b1=beta1,X=X,gamma0=gam0,gamma1=gam1,gamma2=gam2,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
gam1=gam1.star
accept.gam1=accept.gam1+1
}
gammaOut[i,2]<-gam1
#elevation regression coef
gam2.star=rnorm(1,gam2,gam2.tune)
Out=UpdateBetaToCl(tmax=tmax,b0=beta0,b1=beta1,X=X,gamma0=gam0,gamma1=gam1,gamma2=gam2.star,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBetaToCl(tmax=tmax,b0=beta0,b1=beta1,X=X,gamma0=gam0,gamma1=gam1,gamma2=gam2,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
gam2=gam2.star
accept.gam2=accept.gam2+1
}
gammaOut[i,3]<-gam2
# dispersal param
tau.star=rnorm(1,tau,tau.tune)
Out=UpdateDispersal(tmax=tmax,tau=tau.star,Nlat=Nlat,G=G,p=p,D=D)
Npred.star<-Out$Npred
M.star<-Out$M
now=UpdateDispersal(tmax=tmax,tau=tau,Nlat=Nlat,G=G,p=p,D=D)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
M=M.star
Minv<-chol2inv(M.star)
tau<-tau.star
accept.tau=accept.tau+1
}
tauOut[i,]<-tau
for (t in 2:tmax){
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
sig.p<-sqrt(sampleSigma(Nlat=c(Nlat[-1,]),Npred=c(Npred[-1,]),a=3,b=.5))
sig.pOut[i,]<-sig.p
#sig.o<-sqrt(sampleObS(Nlat=c(Nlat),N=c(N),a=3,b=.5))
sig.oOut[i,]<-sig.o
for (t in 1:tmax){
Nlat[t,]<-sampleLatent(Npred,Nlat,N,G,M,Minv,sig.o,sig.p,tmax)
}
NlatOut[,,i]<-Nlat[,rep.pix]
NlatOutLast[,i]<-Nlat[tmax,]
print(i)
if(i%%checkpoint==0){
if(accept.beta0/i<0.35) beta0.tune=beta0.tune*.9
if(accept.beta0/i>0.45) beta0.tune=beta0.tune*1.1
if(accept.beta1/i<0.35) beta1.tune=beta1.tune*.9
if(accept.beta1/i>0.45) beta1.tune=beta1.tune*1.1
if(accept.gam0/i<0.35) gam0.tune=gam0.tune*.9
if(accept.gam0/i>0.45) gam0.tune=gam0.tune*1.1
if(accept.gam1/i<0.35) gam1.tune=gam1.tune*.9
if(accept.gam1/i>0.45) gam1.tune=gam1.tune*1.1
if(accept.gam2/i<0.35) gam2.tune=gam2.tune*.9
if(accept.gam2/i>0.45) gam2.tune=gam2.tune*1.1
if(accept.tau/i<0.35) tau.tune=tau.tune*.9
if(accept.tau/i>0.45) tau.tune=tau.tune*1.1
}
}
plot(gammaOut[,1], type = "l")
plot(gammaOut[,1], type = "l")
plot(gammaOut[1:20,1], type = "l")
plot(gammaOut[1:20,2], type = "l")
plot(gammaOut[1:20,3], type = "l")
plot(betaOut[1:20,1], type = "l")
plot(betaOut[1:20,2], type = "l")
plot(tauOut[1:20], type = "l")
NlatOut<-array(NA,c(tmax,pmax,Niter/10)) # change to all pixels, but only every 10th iteration
NlatOut<-array(NA,c(31,21352,20000/10)) # change to all pixels, but only every 10th iteration
NlatOut<-array(NA,c(31,2352,20000/10)) # change to all pixels, but only every 10th iteration
dim(NlatOut)
#rep.pix <- c(115:145, 910:940, 1865:1895) # representative pixels (high,med,low density)
Nlatsub <- seq(1:20000, by = 10)
?seq
#rep.pix <- c(115:145, 910:940, 1865:1895) # representative pixels (high,med,low density)
Nlatsub <- seq(1,20000, by = 10)
Nlatsub
20000/50
2000/20
20000/20
length(Nlatsub)
Niter/10
Niter<-20000 ###Number of interations. Keep in mind this will need to be more than you needed for stan
Niter/10
#rep.pix <- c(115:145, 910:940, 1865:1895) # representative pixels (high,med,low density)
tenIter <- seq(1,20000, by = 10) # vecotr of every 10th iteration
for (t in 1:100){
if([t]==tenIter){}
if([t]==tenIter){print(yo)}
for (t in 1:100){
if([t]==tenIter){print(yo)}
for (t in 1:100){
if(t==tenIter){print(yo)}
}
i = 10
if(i/10==tenIter[i]){
NlatOut[,,i] <- Nlat}
tenIter
i=11
if(i==tenIter[i/10]){
print("yo!")
}
if(i==tenIter[i]){
print("yo!")}
i
tenIter[i]
101/10
101/11
if(i==tenIter[(i-1)/10]){
print("yo!")
}
i
tenIter[i-1]
tenIter[i]
tenIter[(i-1)]
tenIter[i]-1/10
tenIter[i]-1
i
if(i==(tenIter[i]-1)/10){
print("yo!")}
tenIter[i]-1)/10
(tenIter[i]-1)/10
((tenIter[i]-1)/10))
((tenIter[i]-1)/10)
if(i==((tenIter[i]-1)/10)){
print("yo!")}
for(i 1:100) {}
for(i in 1:100) {
if(i==((tenIter[i]-1)/10)){
print("yo!")}}
for(i in 1:Niter) {
if(Niter[i]==((tenIter[i]-1)/10)){
print("yo!")}}
.libPaths("C:/Rpackages/R/win-library/4.1") # (elise setting package library location)
load("G:/.shortcut-targets-by-id/1FPlPAVacVgAROSPXMiiOGb2Takzm2241/PJ_Photo/cover_spread/Scripts/data_prepped.RData")
sampleSigma<-function(Nlat,Npred,a,b){  ###This function will return variance. Need to sqrt to get SD
n<-length(c(Nlat))
tmp.a<-a+n/2
tmp.b<-b+(0.5*sum((Nlat-Npred)^2))
s2=rinvgamma(1,tmp.a,tmp.b)
}
sampleObS<-function(Nlat,N,a,b){  ###This function will return variance. Need to sqrt to get SD
n<-length(c(Nlat))
tmp.a<-a+n/2
tmp.b<-b+(0.5*sum((N-Nlat)^2,na.rm=T))
return(rinvgamma(1,tmp.a,tmp.b))
}
sampleLatent<-function(Npred,Nlat,N,G,M,Minv,sig.o,sig.p,tmax) {
###This function sequentially adds info from the different data sources to inform latent state
#zero out
s2<-sig.p^2
o1<-sig.o^2
Vi=0
v=0
#1. Contribution of Observations
Vi=1/o1
v=(N[t,]/o1)
#2. Contribution of previous time step. Not included if we are in the first time step
if(t>1){
mu1<-M%*%(diag(G[t,])%*%Nlat[t-1,])
Vi=Vi+1/s2
v=v+mu1/s2
}
#2. Contribution of previous time step
# should fix G to be matrix
if(t<tmax){
mu2<-Minv%*%(diag(1/G[t+1,])%*%Nlat[t+1,]) ####Here y is arranged year by pixel and X is year by pixel by covariate
Vi=Vi+1/s2
v=v+mu2/s2
}
V<-1/Vi
Nlat_t<-rnorm(length(v),c(V*v),sqrt(V))
return(Nlat_t)
}
UpdateBeta<-function(tmax,b0,b1,Nlat,M,p){ # add X and C to list of arguments
Npred<-matrix(NA,tmax,p)
G<-matrix(NA,tmax,p)
for (t in 2:tmax){
G[t,]<-exp(b0+b1*Nlat[t-1,])
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
return(list(Npred=Npred,G=G))
}
# growth function w climate covariate
UpdateBetaClim<-function(tmax,b0,b1,X,gamma,Nlat,M,p){ # add X and C to list of arguments
Npred<-matrix(NA,tmax,p)
G<-matrix(NA,tmax,p)
for (t in 2:tmax){
G[t,]<-exp((b0+X[t,]*gamma)+b1*Nlat[t-1,])
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
return(list(Npred=Npred,G=G))
}
# growth function w climate and topo covariates on beta0
UpdateBetaToCl<-function(tmax,b0,b1,X,gamma0,gamma1,gamma2,Nlat,M,p){ # add X and C to list of arguments
Npred<-matrix(NA,tmax,p)
G<-matrix(NA,tmax,p)
for (t in 2:tmax){
G[t,]<-exp((b0+X[t,,1]*gamma0+X[t,,2]*gamma1+gamma2+X[t,,3])+b1*Nlat[t-1,])
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
return(list(Npred=Npred,G=G))
}
# growth function w climate and topo covariates on beta0 and topo covars on beta1
UpdateBetaToClV2<-function(tmax,b0,b1,X,gamma0,gamma1,gamma2,Nlat,M,p){ # add X and C to list of arguments
Npred<-matrix(NA,tmax,p)
G<-matrix(NA,tmax,p)
for (t in 2:tmax){
G[t,]<-exp((b0+X[t,1]*gamma0+X[t,2]*gamma1+gamma2+X[t,3])+(b1+X[t,2]*phi0[t]+X[t,3]*phi1[t])*Nlat[t-1,])
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
return(list(Npred=Npred,G=G))
}
# dispersal
UpdateDispersal<-function(tmax,tau,Nlat,G,p,D){
Npred<-matrix(NA,tmax,p)
Mint<-exp(-(D/tau))
M<-t(Mint/apply(Mint,1,sum))
for (t in 2:tmax){
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
return(list(Npred=Npred,M=M))
}
library("splus2R")
library('LaplacesDemon')
###Data####
N<-N[1:31,] # observed data, assumed to be a matrix that is year by pixel (remove last 5 years here)
tmax<-dim(N)[1]
pmax<-dim(N)[2]
D<-Dsq
#X<-if you have covariates this is where they go
bmax<-2 #length(X[1,]) number of covariates
###Starting Values###
Nlat<-N #Starting values for latent states is the observed data
beta0<-.01 ###Give beta some starting values based on what we know
library("splus2R")
library('LaplacesDemon')
###Data####
N<-N[1:31,] # observed data, assumed to be a matrix that is year by pixel (remove last 5 years here)
tmax<-dim(N)[1]
pmax<-dim(N)[2]
D<-Dsq
#X<-if you have covariates this is where they go
bmax<-2 #length(X[1,]) number of covariates
###Starting Values###
Nlat<-N #Starting values for latent states is the observed data
beta0<-.019 ###Give beta some starting values based on what we know
beta1<--0.001
tau<-.033###Give tau a reasonable starting value.
sig.p<-1.3##give sig.p reasonable starting values
o1<-sig.o<-1##give sig.o reasonable starting values
ro <- 0.5
qo1 <- (ro/o1)+1
Mint<-exp(-(D/tau))
M<-t(Mint/apply(Mint,1,sum))  ##calculate M starting M given Tau
Npred<-G<-matrix(NA,tmax,pmax)
for (t in 2:tmax){
G[t,]<-exp(beta0+beta1*Nlat[t-1,])
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
Niter<-20000 ###Number of interations. Keep in mind this will need to be more than you needed for stan
checkpoint=Niter*0.01
###Containers####
tauOut<-matrix(NA,Niter,)
betaOut<-matrix(NA,Niter,bmax)
NlatOut<-array(NA,c(tmax,pmax,Niter/10)) # change to all pixels, but only every 10th iteration
NlatOutLast<-matrix(NA,pmax,Niter)
#rep.pix <- c(115:145, 910:940, 1865:1895) # representative pixels (high,med,low density)
tenIter <- seq(1,20000, by = 10) # vector of every 10th iteration
sig.pOut<-sig.oOut<-matrix(NA,Niter,1)
accept.beta1=accept.beta0=accept.tau=0
#beta.tune=diag(c(.000001,.000001))
beta0.tune=.000001
beta1.tune=.0001
tau.tune=.001
i = 1
if(i==((tenIter[i]-1)/10)) print("yo!")
if(i==((tenIter[i]-1)/10)) {print("yo!")}
i==((tenIter[i]-1)/10))
i==((tenIter[i]-1)/10)
i=11
i==((tenIter[i]-1)/10)
(tenIter[i]-1)/10
(tenIter[i]-1)
#rep.pix <- c(115:145, 910:940, 1865:1895) # representative pixels (high,med,low density)
tenIter <- seq(0,20000, by = 10) # vector of every 10th iteration
tenIter
#rep.pix <- c(115:145, 910:940, 1865:1895) # representative pixels (high,med,low density)
tenIter <- seq(10,20000, by = 10) # vector of every 10th iteration
tenIter
length(tenIter)
#rep.pix <- c(115:145, 910:940, 1865:1895) # representative pixels (high,med,low density)
tenIter <- seq(10,20000, by = 10) # vector of every 10th iteration
i=10
i==((tenIter[i])/10))
i==((tenIter[i])/10)
for(i 1:100) {}
for(i in 1:100) {
if(i==((tenIter[i])/10)){ print("yo!")
}
}
i = 1
(tenIter[i])/10
tenIter[2]
for(i in 1:100) {
if(i==((tenIter[i])/10)){
print("yo!")
count <- count+1
}
}
count = 0
if(i==((tenIter[i])/10)){
}}
for(i in 1:100) {
if(i==((tenIter[i])/10)){
count <- count+1
}
}
count
tenIter[1]/10
for(i in 1:100) {
if(i==tenIter[i]) {}
}}
count = 0
for(i in 1:100) {
if(i==tenIter[i]){}
count <- count +1
}}
for(i in 1:100) {
if(i==tenIter[i]){
count <- count +1
}
}
count
for(i in 1:100) {
if(i==tenIter[i/10]){
count <- count +1
}
}
tenIter[i/10]
tenIter[i]
i = 10
for(i in 1:100) {
if(i %in% tenIter){
print("yo!")
}
}
###Starting Values###
Nlat<-N #Starting values for latent states is the observed data
beta0<-.019 ###Give beta some starting values based on what we know
beta1<--0.001
tau<-.033###Give tau a reasonable starting value.
sig.p<-1.3##give sig.p reasonable starting values
o1<-sig.o<-1##give sig.o reasonable starting values
ro <- 0.5
qo1 <- (ro/o1)+1
Mint<-exp(-(D/tau))
M<-t(Mint/apply(Mint,1,sum))  ##calculate M starting M given Tau
Npred<-G<-matrix(NA,tmax,pmax)
for (t in 2:tmax){
G[t,]<-exp(beta0+beta1*Nlat[t-1,])
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
Niter<-20000 ###Number of interations. Keep in mind this will need to be more than you needed for stan
checkpoint=Niter*0.01
###Containers####
tauOut<-matrix(NA,Niter,)
betaOut<-matrix(NA,Niter,bmax)
NlatOut<-array(NA,c(tmax,pmax,Niter/10)) # change to all pixels, but only every 10th iteration
NlatOutLast<-matrix(NA,pmax,Niter)
#rep.pix <- c(115:145, 910:940, 1865:1895) # representative pixels (high,med,low density)
tenIter <- seq(10,20000, by = 10) # vector of every 10th iteration
sig.pOut<-sig.oOut<-matrix(NA,Niter,1)
accept.beta1=accept.beta0=accept.tau=0
#beta.tune=diag(c(.000001,.000001))
beta0.tune=.000001
beta1.tune=.0001
tau.tune=.001
length(tenIter)
Niter/10
for (i in 1:Niter){ # edit starting iteration if start/stopping
beta0.star=rnorm(1,beta0,beta0.tune)
Out=UpdateBeta(tmax=tmax,b0=beta0.star,b1=beta1,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBeta(tmax=tmax,b0=beta0,b1=beta1,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta0=beta0.star
accept.beta0=accept.beta0+1
}
betaOut[i,1]<-beta0
beta1.star=rnorm(1,beta1,beta1.tune)
Out=UpdateBeta(tmax=tmax,b0=beta0,b1=beta1.star,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBeta(tmax=tmax,b0=beta0,b1=beta1,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta1=beta1.star
accept.beta1=accept.beta1+1
}
betaOut[i,2]<-beta1
tau.star=rnorm(1,tau,tau.tune)
Out=UpdateDispersal(tmax=tmax,tau=tau.star,Nlat=Nlat,G=G,p=p,D=D)
Npred.star<-Out$Npred
M.star<-Out$M
now=UpdateDispersal(tmax=tmax,tau=tau,Nlat=Nlat,G=G,p=p,D=D)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
M=M.star
Minv<-chol2inv(M.star)
tau<-tau.star
accept.tau=accept.tau+1
}
tauOut[i,]<-tau
for (t in 2:tmax){
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
sig.p<-sqrt(sampleSigma(Nlat=c(Nlat[-1,]),Npred=c(Npred[-1,]),a=3,b=.5))
sig.pOut[i,]<-sig.p
#sig.o<-sqrt(sampleObS(Nlat=c(Nlat),N=c(N),a=3,b=.5))
sig.oOut[i,]<-sig.o
for (t in 1:tmax){
Nlat[t,]<-sampleLatent(Npred,Nlat,N,G,M,Minv,sig.o,sig.p,tmax)
}
if(i %in% tenIter) {
NlatOut[,,i/10] <- Nlat}
NlatOutLast[,i]<-Nlat[tmax,]
print(i)
if(i%%checkpoint==0){
if(accept.beta0/i<0.35) beta0.tune=beta0.tune*.9
if(accept.beta0/i>0.45) beta0.tune=beta0.tune*1.1
if(accept.beta1/i<0.35) beta1.tune=beta1.tune*.9
if(accept.beta1/i>0.45) beta1.tune=beta1.tune*1.1
if(accept.tau/i<0.35) tau.tune=tau.tune*.9
if(accept.tau/i>0.45) tau.tune=tau.tune*1.1
}
}
NlatOut[1,1,]
NlatOut[1:10,1:10,1]
View(vpdmax)
View(topodat)
