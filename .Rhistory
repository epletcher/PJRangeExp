}
#2. Contribution of previous time step
# should fix G to be matrix
if(t<tmax){
mu2<-Minv%*%(diag(1/G[t+1,])%*%Nlat[t+1,]) ####Here y is arranged year by pixel and X is year by pixel by covariate
Vi=Vi+1/s2
v=v+mu2/s2
}
V<-1/Vi
Nlat_t<-rnorm(length(v),c(V*v),sqrt(V))
return(Nlat_t)
}
UpdateBeta<-function(tmax,a0,b0,Nlat,M,p){ # add X and C to list of arguments
Npred<-matrix(NA,tmax,p)
G<-matrix(NA,tmax,p)
for (t in 2:tmax){
G[t,]<-exp(a0+b0*Nlat[t-1,])
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
return(list(Npred=Npred,G=G))
}
UpdateBetaQuad<-function(tmax,b0,b1,b2,Nlat,M,p){ # add X and C to list of arguments
Npred<-matrix(NA,tmax,p)
G<-matrix(NA,tmax,p)
for (t in 2:tmax){
G[t,]<-exp(b0+b1*Nlat[t-1,]+b2*(Nlat[t-1,]^2))
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
return(list(Npred=Npred,G=G))
}
# growth function w climate covariate
UpdateBetaClim<-function(tmax,a0,a1,a2,X,b0,Nlat,M,p){ # add X and C to list of arguments
Npred<-matrix(NA,tmax,p)
G<-matrix(NA,tmax,p)
for (t in 2:tmax){
G[t,]<-exp((a0+X[t,,1]*a1+X[t,,2]*a2)+b0*Nlat[t-1,])
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
return(list(Npred=Npred,G=G))
}
# growth function w topo covariates on alpha and beta
UpdateBetaTop<-function(tmax,a0,a1,a2,X,b0,b1,b2,Nlat,M,p){ # add X and gammas to list of arguments
Npred<-matrix(NA,tmax,p)
G<-matrix(NA,tmax,p)
for (t in 2:tmax){
G[t,]<-exp((a0+X[t,,1]*a1+X[t,,2]*a2)+(b0+X[t,,1]*b1+X[t,,2]*b2)*Nlat[t-1,])
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
return(list(Npred=Npred,G=G))
}
# growth function w climate and topo covariates on alpha and topo covars on beta
UpdateBetaToCl<-function(tmax,a0,a1,a2,a3,a4,X,b0,b1,b2,Nlat,M,p){
Npred<-matrix(NA,tmax,p)
G<-matrix(NA,tmax,p)
for (t in 2:tmax){
G[t,]<-exp((a0+X[t,,1]*a1+X[t,,2]*a2+X[t,,3]*a3+X[t,,4]*a4)+(b0+X[t,,3]*b1+X[t,,4]*b2)*Nlat[t-1,])
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
return(list(Npred=Npred,G=G))
}
# dispersal
UpdateDispersal<-function(tmax,tau,Nlat,G,p,D){
Npred<-matrix(NA,tmax,p)
Mint<-exp(-(D/tau))
M<-t(Mint/apply(Mint,1,sum))
for (t in 2:tmax){
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
return(list(Npred=Npred,M=M))
}
# rmse
rmsefunc <- function(pred,obs) {
n <- length(pred)
RMSE <- sqrt((sum((pred-obs)^2))/n)
return(RMSE)
}
# bias
biasfunc <- function(pred,obs) {
n <- length(pred)
bias <- (sum(pred-obs))/n
return(bias)
}
for (i in 1:1){ # edit starting iteration if start/stopping
beta0.star=rnorm(1,beta0,beta0.tune)
Out=UpdateBeta(tmax=tmax,b0=beta0.star,b1=beta1,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBeta(tmax=tmax,b0=beta0,b1=beta1,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta0=beta0.star
accept.beta0=accept.beta0+1
}
betaOut[i,1]<-beta0
beta1.star=rnorm(1,beta1,beta1.tune)
Out=UpdateBeta(tmax=tmax,b0=beta0,b1=beta1.star,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBeta(tmax=tmax,b0=beta0,b1=beta1,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta1=beta1.star
accept.beta1=accept.beta1+1
}
betaOut[i,2]<-beta1
tau.star=rnorm(1,tau,tau.tune)
Out=UpdateDispersal(tmax=tmax,tau=tau.star,Nlat=Nlat,G=G,p=p,D=D)
Npred.star<-Out$Npred
M.star<-Out$M
now=UpdateDispersal(tmax=tmax,tau=tau,Nlat=Nlat,G=G,p=p,D=D)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
M=M.star
Minv<-chol2inv(M.star)
tau<-tau.star
accept.tau=accept.tau+1
}
tauOut[i,]<-tau
for (t in 2:tmax){
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
sig.p<-sqrt(sampleSigma(Nlat=c(Nlat[-1,]),Npred=c(Npred[-1,]),a=3,b=.5))
sig.pOut[i,]<-sig.p
#sig.o<-sqrt(sampleObS(Nlat=c(Nlat),N=c(N),a=3,b=.5))
sig.oOut[i,]<-sig.o
for (t in 1:tmax){
Nlat[t,]<-sampleLatent(Npred,Nlat,N,G,M,Minv,sig.o,sig.p,tmax)
}
if(i %in% tenIter) {
NlatOut[,,i/10] <- Nlat}
NlatOutLast[,i]<-Nlat[tmax,]
print(i)
if(i%%checkpoint==0){
if(accept.beta0/i<0.35) beta0.tune=beta0.tune*.9
if(accept.beta0/i>0.45) beta0.tune=beta0.tune*1.1
if(accept.beta1/i<0.35) beta1.tune=beta1.tune*.9
if(accept.beta1/i>0.45) beta1.tune=beta1.tune*1.1
if(accept.tau/i<0.35) tau.tune=tau.tune*.9
if(accept.tau/i>0.45) tau.tune=tau.tune*1.1
}
if(i %in% seq(1000,20000, by = 1000)) {
save.image(file = "R:/Shriver_Lab/PJspread/sampleroutput/sampler_base_v4.RData")
}
## out of sample prediction
# fixed origin
Nt <- Nlat[31,] # set initial cover value as actual latent value
for (t in 1:5){
G<-exp(beta0+beta1*Nt)
Nmean <-M%*%(diag(G)%*%Nt)
Nt <- rnorm(pmax, Nmean, sig.p)
Npredoos[t,] <- Nt
}
# cumulative rmse
for(t in 1:5) {
rmseTotOut[t,i] <- rmsefunc(pred=Npredoos[t,], obs=Noos[t,])
}
# calculate bias
for(t in 1:5) {
rmseTotOut[i] <- rmsefunc(pred=Npredoos, obs=Noos[t,])
}
# rolling origin
for (t in 1:5){
G<-exp(beta0+beta1*N[30+t,])
Nmean <-M%*%(diag(G)%*%N[30+t,])
Nt <- rnorm(pmax, Nmean, sig.p)
Npredoos[t,] <- Nt
}
# 1-year rmse
for(t in 1:5) {
rmseYerOut[i] <- rmsefunc(pred=Npredoos, obs=Noos[t,])
}
}
UpdateBeta<-function(tmax,b0,b1,Nlat,M,p){ # add X and C to list of arguments
Npred<-matrix(NA,tmax,p)
G<-matrix(NA,tmax,p)
for (t in 2:tmax){
G[t,]<-exp(b0+b1*Nlat[t-1,])
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
return(list(Npred=Npred,G=G))
}
for (i in 1:1){ # edit starting iteration if start/stopping
beta0.star=rnorm(1,beta0,beta0.tune)
Out=UpdateBeta(tmax=tmax,b0=beta0.star,b1=beta1,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBeta(tmax=tmax,b0=beta0,b1=beta1,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta0=beta0.star
accept.beta0=accept.beta0+1
}
betaOut[i,1]<-beta0
beta1.star=rnorm(1,beta1,beta1.tune)
Out=UpdateBeta(tmax=tmax,b0=beta0,b1=beta1.star,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBeta(tmax=tmax,b0=beta0,b1=beta1,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta1=beta1.star
accept.beta1=accept.beta1+1
}
betaOut[i,2]<-beta1
tau.star=rnorm(1,tau,tau.tune)
Out=UpdateDispersal(tmax=tmax,tau=tau.star,Nlat=Nlat,G=G,p=p,D=D)
Npred.star<-Out$Npred
M.star<-Out$M
now=UpdateDispersal(tmax=tmax,tau=tau,Nlat=Nlat,G=G,p=p,D=D)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
M=M.star
Minv<-chol2inv(M.star)
tau<-tau.star
accept.tau=accept.tau+1
}
tauOut[i,]<-tau
for (t in 2:tmax){
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
sig.p<-sqrt(sampleSigma(Nlat=c(Nlat[-1,]),Npred=c(Npred[-1,]),a=3,b=.5))
sig.pOut[i,]<-sig.p
#sig.o<-sqrt(sampleObS(Nlat=c(Nlat),N=c(N),a=3,b=.5))
sig.oOut[i,]<-sig.o
for (t in 1:tmax){
Nlat[t,]<-sampleLatent(Npred,Nlat,N,G,M,Minv,sig.o,sig.p,tmax)
}
if(i %in% tenIter) {
NlatOut[,,i/10] <- Nlat}
NlatOutLast[,i]<-Nlat[tmax,]
print(i)
if(i%%checkpoint==0){
if(accept.beta0/i<0.35) beta0.tune=beta0.tune*.9
if(accept.beta0/i>0.45) beta0.tune=beta0.tune*1.1
if(accept.beta1/i<0.35) beta1.tune=beta1.tune*.9
if(accept.beta1/i>0.45) beta1.tune=beta1.tune*1.1
if(accept.tau/i<0.35) tau.tune=tau.tune*.9
if(accept.tau/i>0.45) tau.tune=tau.tune*1.1
}
if(i %in% seq(1000,20000, by = 1000)) {
save.image(file = "R:/Shriver_Lab/PJspread/sampleroutput/sampler_base_v4.RData")
}
## out of sample prediction
# fixed origin
Nt <- Nlat[31,] # set initial cover value as actual latent value
for (t in 1:5){
G<-exp(beta0+beta1*Nt)
Nmean <-M%*%(diag(G)%*%Nt)
Nt <- rnorm(pmax, Nmean, sig.p)
Npredoos[t,] <- Nt
}
# cumulative rmse
for(t in 1:5) {
rmseTotOut[t,i] <- rmsefunc(pred=Npredoos[t,], obs=Noos[t,])
}
# calculate bias
for(t in 1:5) {
rmseTotOut[i] <- rmsefunc(pred=Npredoos, obs=Noos[t,])
}
# rolling origin
for (t in 1:5){
G<-exp(beta0+beta1*N[30+t,])
Nmean <-M%*%(diag(G)%*%N[30+t,])
Nt <- rnorm(pmax, Nmean, sig.p)
Npredoos[t,] <- Nt
}
# 1-year rmse
for(t in 1:5) {
rmseYerOut[i] <- rmsefunc(pred=Npredoos, obs=Noos[t,])
}
}
for (i in 1:1){ # edit starting iteration if start/stopping
beta0.star=rnorm(1,beta0,beta0.tune)
Out=UpdateBeta(tmax=tmax,b0=beta0.star,b1=beta1,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBeta(tmax=tmax,b0=beta0,b1=beta1,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta0=beta0.star
accept.beta0=accept.beta0+1
}
betaOut[i,1]<-beta0
beta1.star=rnorm(1,beta1,beta1.tune)
Out=UpdateBeta(tmax=tmax,b0=beta0,b1=beta1.star,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBeta(tmax=tmax,b0=beta0,b1=beta1,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta1=beta1.star
accept.beta1=accept.beta1+1
}
betaOut[i,2]<-beta1
tau.star=rnorm(1,tau,tau.tune)
Out=UpdateDispersal(tmax=tmax,tau=tau.star,Nlat=Nlat,G=G,p=p,D=D)
Npred.star<-Out$Npred
M.star<-Out$M
now=UpdateDispersal(tmax=tmax,tau=tau,Nlat=Nlat,G=G,p=p,D=D)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
M=M.star
Minv<-chol2inv(M.star)
tau<-tau.star
accept.tau=accept.tau+1
}
tauOut[i,]<-tau
for (t in 2:tmax){
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
sig.p<-sqrt(sampleSigma(Nlat=c(Nlat[-1,]),Npred=c(Npred[-1,]),a=3,b=.5))
sig.pOut[i,]<-sig.p
#sig.o<-sqrt(sampleObS(Nlat=c(Nlat),N=c(N),a=3,b=.5))
sig.oOut[i,]<-sig.o
for (t in 1:tmax){
Nlat[t,]<-sampleLatent(Npred,Nlat,N,G,M,Minv,sig.o,sig.p,tmax)
}
if(i %in% tenIter) {
NlatOut[,,i/10] <- Nlat}
NlatOutLast[,i]<-Nlat[tmax,]
print(i)
if(i%%checkpoint==0){
if(accept.beta0/i<0.35) beta0.tune=beta0.tune*.9
if(accept.beta0/i>0.45) beta0.tune=beta0.tune*1.1
if(accept.beta1/i<0.35) beta1.tune=beta1.tune*.9
if(accept.beta1/i>0.45) beta1.tune=beta1.tune*1.1
if(accept.tau/i<0.35) tau.tune=tau.tune*.9
if(accept.tau/i>0.45) tau.tune=tau.tune*1.1
}
if(i %in% seq(1000,20000, by = 1000)) {
save.image(file = "R:/Shriver_Lab/PJspread/sampleroutput/sampler_base_v4.RData")
}
## out of sample prediction
# fixed origin
Nt <- Nlat[31,] # set initial cover value as actual latent value
for (t in 1:5){
G<-exp(beta0+beta1*Nt)
Nmean <-M%*%(diag(G)%*%Nt)
Nt <- rnorm(pmax, Nmean, sig.p)
Npredoos[t,] <- Nt
}
# cumulative rmse
for(t in 1:5) {
rmseTotOut[t,i] <- rmsefunc(pred=Npredoos[t,], obs=Noos[t,])
}
# calculate bias
for(t in 1:5) {
biasOut[t,i] <- biasfunc(pred=Npredoos[t,], obs=Noos[t,])
}
# rolling origin
for (t in 1:5){
G<-exp(beta0+beta1*N[30+t,])
Nmean <-M%*%(diag(G)%*%N[30+t,])
Nt <- rnorm(pmax, Nmean, sig.p)
Npredoos[t,] <- Nt
}
# 1-year rmse
for(t in 1:5) {
rmseYerOut[i] <- rmsefunc(pred=Npredoos[t,], obs=Noos[t,])
}
}
biasOut[,1]
rmseTotOut[,1]
rmseYerOut[,1]
for (i in 1:1){ # edit starting iteration if start/stopping
beta0.star=rnorm(1,beta0,beta0.tune)
Out=UpdateBeta(tmax=tmax,b0=beta0.star,b1=beta1,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBeta(tmax=tmax,b0=beta0,b1=beta1,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta0=beta0.star
accept.beta0=accept.beta0+1
}
betaOut[i,1]<-beta0
beta1.star=rnorm(1,beta1,beta1.tune)
Out=UpdateBeta(tmax=tmax,b0=beta0,b1=beta1.star,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBeta(tmax=tmax,b0=beta0,b1=beta1,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta1=beta1.star
accept.beta1=accept.beta1+1
}
betaOut[i,2]<-beta1
tau.star=rnorm(1,tau,tau.tune)
Out=UpdateDispersal(tmax=tmax,tau=tau.star,Nlat=Nlat,G=G,p=p,D=D)
Npred.star<-Out$Npred
M.star<-Out$M
now=UpdateDispersal(tmax=tmax,tau=tau,Nlat=Nlat,G=G,p=p,D=D)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
M=M.star
Minv<-chol2inv(M.star)
tau<-tau.star
accept.tau=accept.tau+1
}
tauOut[i,]<-tau
for (t in 2:tmax){
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
sig.p<-sqrt(sampleSigma(Nlat=c(Nlat[-1,]),Npred=c(Npred[-1,]),a=3,b=.5))
sig.pOut[i,]<-sig.p
#sig.o<-sqrt(sampleObS(Nlat=c(Nlat),N=c(N),a=3,b=.5))
sig.oOut[i,]<-sig.o
for (t in 1:tmax){
Nlat[t,]<-sampleLatent(Npred,Nlat,N,G,M,Minv,sig.o,sig.p,tmax)
}
if(i %in% tenIter) {
NlatOut[,,i/10] <- Nlat}
NlatOutLast[,i]<-Nlat[tmax,]
print(i)
if(i%%checkpoint==0){
if(accept.beta0/i<0.35) beta0.tune=beta0.tune*.9
if(accept.beta0/i>0.45) beta0.tune=beta0.tune*1.1
if(accept.beta1/i<0.35) beta1.tune=beta1.tune*.9
if(accept.beta1/i>0.45) beta1.tune=beta1.tune*1.1
if(accept.tau/i<0.35) tau.tune=tau.tune*.9
if(accept.tau/i>0.45) tau.tune=tau.tune*1.1
}
if(i %in% seq(1000,20000, by = 1000)) {
save.image(file = "R:/Shriver_Lab/PJspread/sampleroutput/sampler_base_v4.RData")
}
## out of sample prediction
# fixed origin
Nt <- Nlat[31,] # set initial cover value as actual latent value
for (t in 1:5){
G<-exp(beta0+beta1*Nt)
Nmean <-M%*%(diag(G)%*%Nt)
Nt <- rnorm(pmax, Nmean, sig.p)
Npredoos[t,] <- Nt
}
# cumulative rmse
for(t in 1:5) {
rmseTotOut[t,i] <- rmsefunc(pred=Npredoos[t,], obs=Noos[t,])
}
# calculate bias
for(t in 1:5) {
biasOut[t,i] <- biasfunc(pred=Npredoos[t,], obs=Noos[t,])
}
# rolling origin
for (t in 1:5){
G<-exp(beta0+beta1*N[30+t,])
Nmean <-M%*%(diag(G)%*%N[30+t,])
Nt <- rnorm(pmax, Nmean, sig.p)
Npredoos[t,] <- Nt
}
# 1-year rmse
for(t in 1:5) {
rmseYerOut[t,i] <- rmsefunc(pred=Npredoos[t,], obs=Noos[t,])
}
}
rmseYerOut[,1]
rmseTotOut[,1]
biasOut[,1]
.libPaths("C:/Rpackages/R/win-library/4.1")
# load sampler functions script
source("R:/Shriver_Lab/PJspread/PJ_spread_repo/SamplerFunctions.R")
load("G:/.shortcut-targets-by-id/1FPlPAVacVgAROSPXMiiOGb2Takzm2241/PJ_Photo/cover_spread/Scripts/Sampler/sampler_output_worskpace_files/sampler_topoClim_v1.RData")
load("G:/.shortcut-targets-by-id/1FPlPAVacVgAROSPXMiiOGb2Takzm2241/PJ_Photo/cover_spread/Scripts/Sampler/sampler_output_worskpace_files/sampler_base_quad.RData")
plot(betaOut[,1], type ="l")
plot(betaOut[,2], type ="l")
plot(betaOut[,3], type ="l")
median(betaOut[15000:20000,1])
median(betaOut[15000:20000,2])
median(betaOut[15000:20000,3])
