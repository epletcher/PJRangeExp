Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
sig.p<-sqrt(sampleSigma(Nlat=c(Nlat[-1,]),Npred=c(Npred[-1,]),a=3,b=.5))
sig.pOut[i,]<-sig.p
#sig.o<-sqrt(sampleObS(Nlat=c(Nlat),N=c(N),a=3,b=.5))
sig.oOut[i,]<-sig.o
for (t in 1:tmax){
Nlat[t,]<-sampleLatent(Npred,Nlat,N,G,M,Minv,sig.o,sig.p,tmax)
}
NlatOut[,,i]<-Nlat[,rep.pix]
NlatOutLast[,i]<-Nlat[tmax,]
print(i)
if(i%%checkpoint==0){
if(accept.beta0/i<0.35) beta0.tune=beta0.tune*.9
if(accept.beta0/i>0.45) beta0.tune=beta0.tune*1.1
if(accept.beta1/i<0.35) beta1.tune=beta1.tune*.9
if(accept.beta1/i>0.45) beta1.tune=beta1.tune*1.1
if(accept.tau/i<0.35) tau.tune=tau.tune*.9
if(accept.tau/i>0.45) tau.tune=tau.tune*1.1
}
}
sampleSigma<-function(Nlat,Npred,a,b){  ###This function will return variance. Need to sqrt to get SD
n<-length(c(Nlat))
tmp.a<-a+n/2
tmp.b<-b+(0.5*sum((Nlat-Npred)^2))
s2=rinvgamma(1,tmp.a,tmp.b)
}
sampleObS<-function(Nlat,N,a,b){  ###This function will return variance. Need to sqrt to get SD
n<-length(c(Nlat))
tmp.a<-a+n/2
tmp.b<-b+(0.5*sum((N-Nlat)^2,na.rm=T))
return(rinvgamma(1,tmp.a,tmp.b))
}
sampleLatent<-function(Npred,Nlat,N,G,M,Minv,sig.o,sig.p,tmax) {
###This function sequentially adds info from the different data sources to inform latent state
#zero out
s2<-sig.p^2
o1<-sig.o^2
Vi=0
v=0
#1. Contribution of Observations
Vi=1/o1
v=(N[t,]/o1)
#2. Contribution of previous time step. Not included if we are in the first time step
if(t>1){
mu1<-M%*%(diag(G[t,])%*%Nlat[t-1,])
Vi=Vi+1/s2
v=v+mu1/s2
}
#2. Contribution of previous time step
# should fix G to be matrix
if(t<tmax){
mu2<-Minv%*%(diag(1/G[t+1,])%*%Nlat[t+1,]) ####Here y is arranged year by pixel and X is year by pixel by covariate
Vi=Vi+1/s2
v=v+mu2/s2
}
V<-1/Vi
Nlat_t<-rnorm(length(v),c(V*v),sqrt(V))
return(Nlat_t)
}
UpdateBeta<-function(tmax,b0,b1,Nlat,M,p){ # add X and C to list of arguments
Npred<-matrix(NA,tmax,p)
G<-matrix(NA,tmax,p)
for (t in 2:tmax){
G[t,]<-exp(b0+b1*Nlat[t-1,])
#G[t,]<-exp((b0+X[t,,]*C)+b[1]*Nlat[t-1,])
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
return(list(Npred=Npred,G=G))
}
UpdateDispersal<-function(tmax,tau,Nlat,G,p,D){
Npred<-matrix(NA,tmax,p)
Mint<-exp(-(D/tau))
M<-t(Mint/apply(Mint,1,sum))
for (t in 2:tmax){
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
return(list(Npred=Npred,M=M))
}
###Data####
N<-N[1:31,] # observed data, assumed to be a matrix that is year by pixel (remove last 5 years here)
tmax<-dim(N)[1]
pmax<-dim(N)[2]
D<-Dsq
#X<-if you have covariates this is where they go
bmax<-2 #length(X[1,]) number of covariates
###Starting Values###
Nlat<-N #Starting values for latent states is the observed data
beta0<-.01 ###Give beta some starting values based on what we know
beta1<-0.01
tau<-.1###Give tau a reasonable starting value.
sig.p<-.1##give sig.p reasonable starting values
o1<-sig.o<-1##give sig.o reasonable starting values
ro <- 0.5
qo1 <- (ro/o1)+1
Mint<-exp(-(D/tau))
M<-t(Mint/apply(Mint,1,sum))  ##calculate M starting M given Tau
Npred<-G<-matrix(NA,tmax,pmax)
for (t in 2:tmax){
G[t,]<-exp(beta0+beta1*Nlat[t-1,])
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
Niter<-20000 ###Number of interations. Keep in mind this will need to be more than you needed for stan
checkpoint=Niter*0.01
###Containers####
tauOut<-matrix(NA,Niter,)
betaOut<-matrix(NA,Niter,bmax)
NlatOut<-array(NA,c(tmax,93,Niter)) # change to 93 pixels
NlatOutLast<-matrix(NA,pmax,Niter)
rep.pix <- c(115:145, 910:940, 1865:1895) # representative pixels (high,med,low density)
sig.pOut<-sig.oOut<-matrix(NA,Niter,1)
accept.beta1=accept.beta0=accept.tau=0
#beta.tune=diag(c(.000001,.000001))
beta0.tune=.000001
beta1.tune=.000001
tau.tune=.001
for (i in 1:Niter){
beta0.star=rnorm(1,beta0,beta0.tune)
Out=UpdateBeta(tmax=tmax,b0=beta0.star,b1=beta1,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBeta(tmax=tmax,b0=beta0,b1=beta1,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta0=beta0.star
accept.beta0=accept.beta0+1
}
beta0Out[i,1]<-beta0
beta1.star=rnorm(1,beta1,beta1.tune)
Out=UpdateBeta(tmax=tmax,b0=beta0,b1=beta1.star,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBeta(tmax=tmax,b0=beta0,b1=beta1,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta1=beta1.star
accept.beta1=accept.beta1+1
}
beta1Out[i,2]<-beta1
tau.star=rnorm(1,tau,tau.tune)
Out=UpdateDispersal(tmax=tmax,tau=tau.star,Nlat=Nlat,G=G,p=p,D=D)
Npred.star<-Out$Npred
M.star<-Out$M
now=UpdateDispersal(tmax=tmax,tau=tau,Nlat=Nlat,G=G,p=p,D=D)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
M=M.star
Minv<-chol2inv(M.star)
tau<-tau.star
accept.tau=accept.tau+1
}
tauOut[i,]<-tau
for (t in 2:tmax){
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
sig.p<-sqrt(sampleSigma(Nlat=c(Nlat[-1,]),Npred=c(Npred[-1,]),a=3,b=.5))
sig.pOut[i,]<-sig.p
#sig.o<-sqrt(sampleObS(Nlat=c(Nlat),N=c(N),a=3,b=.5))
sig.oOut[i,]<-sig.o
for (t in 1:tmax){
Nlat[t,]<-sampleLatent(Npred,Nlat,N,G,M,Minv,sig.o,sig.p,tmax)
}
NlatOut[,,i]<-Nlat[,rep.pix]
NlatOutLast[,i]<-Nlat[tmax,]
print(i)
if(i%%checkpoint==0){
if(accept.beta0/i<0.35) beta0.tune=beta0.tune*.9
if(accept.beta0/i>0.45) beta0.tune=beta0.tune*1.1
if(accept.beta1/i<0.35) beta1.tune=beta1.tune*.9
if(accept.beta1/i>0.45) beta1.tune=beta1.tune*1.1
if(accept.tau/i<0.35) tau.tune=tau.tune*.9
if(accept.tau/i>0.45) tau.tune=tau.tune*1.1
}
}
###Starting Values###
Nlat<-N #Starting values for latent states is the observed data
beta0<-.01 ###Give beta some starting values based on what we know
beta1<-0.01
tau<-.1###Give tau a reasonable starting value.
sig.p<-.1##give sig.p reasonable starting values
o1<-sig.o<-1##give sig.o reasonable starting values
ro <- 0.5
qo1 <- (ro/o1)+1
Mint<-exp(-(D/tau))
M<-t(Mint/apply(Mint,1,sum))  ##calculate M starting M given Tau
Npred<-G<-matrix(NA,tmax,pmax)
for (t in 2:tmax){
G[t,]<-exp(beta0+beta1*Nlat[t-1,])
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
Niter<-20000 ###Number of interations. Keep in mind this will need to be more than you needed for stan
checkpoint=Niter*0.01
###Containers####
tauOut<-matrix(NA,Niter,)
betaOut<-matrix(NA,Niter,bmax)
NlatOut<-array(NA,c(tmax,93,Niter)) # change to 93 pixels
NlatOutLast<-matrix(NA,pmax,Niter)
rep.pix <- c(115:145, 910:940, 1865:1895) # representative pixels (high,med,low density)
sig.pOut<-sig.oOut<-matrix(NA,Niter,1)
accept.beta1=accept.beta0=accept.tau=0
#beta.tune=diag(c(.000001,.000001))
beta0.tune=.000001
beta1.tune=.000001
tau.tune=.001
for (i in 1:Niter){
beta0.star=rnorm(1,beta0,beta0.tune)
Out=UpdateBeta(tmax=tmax,b0=beta0.star,b1=beta1,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBeta(tmax=tmax,b0=beta0,b1=beta1,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta0=beta0.star
accept.beta0=accept.beta0+1
}
betaOut[i,1]<-beta0
beta1.star=rnorm(1,beta1,beta1.tune)
Out=UpdateBeta(tmax=tmax,b0=beta0,b1=beta1.star,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBeta(tmax=tmax,b0=beta0,b1=beta1,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta1=beta1.star
accept.beta1=accept.beta1+1
}
betaOut[i,2]<-beta1
tau.star=rnorm(1,tau,tau.tune)
Out=UpdateDispersal(tmax=tmax,tau=tau.star,Nlat=Nlat,G=G,p=p,D=D)
Npred.star<-Out$Npred
M.star<-Out$M
now=UpdateDispersal(tmax=tmax,tau=tau,Nlat=Nlat,G=G,p=p,D=D)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
M=M.star
Minv<-chol2inv(M.star)
tau<-tau.star
accept.tau=accept.tau+1
}
tauOut[i,]<-tau
for (t in 2:tmax){
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
sig.p<-sqrt(sampleSigma(Nlat=c(Nlat[-1,]),Npred=c(Npred[-1,]),a=3,b=.5))
sig.pOut[i,]<-sig.p
#sig.o<-sqrt(sampleObS(Nlat=c(Nlat),N=c(N),a=3,b=.5))
sig.oOut[i,]<-sig.o
for (t in 1:tmax){
Nlat[t,]<-sampleLatent(Npred,Nlat,N,G,M,Minv,sig.o,sig.p,tmax)
}
NlatOut[,,i]<-Nlat[,rep.pix]
NlatOutLast[,i]<-Nlat[tmax,]
print(i)
if(i%%checkpoint==0){
if(accept.beta0/i<0.35) beta0.tune=beta0.tune*.9
if(accept.beta0/i>0.45) beta0.tune=beta0.tune*1.1
if(accept.beta1/i<0.35) beta1.tune=beta1.tune*.9
if(accept.beta1/i>0.45) beta1.tune=beta1.tune*1.1
if(accept.tau/i<0.35) tau.tune=tau.tune*.9
if(accept.tau/i>0.45) tau.tune=tau.tune*1.1
}
}
mh1
mh2
library("splus2R")
library('LaplacesDemon')
?chol2inv
sampleSigma<-function(Nlat,Npred,a,b){  ###This function will return variance. Need to sqrt to get SD
n<-length(c(Nlat))
tmp.a<-a+n/2
tmp.b<-b+(0.5*sum((Nlat-Npred)^2))
s2=rinvgamma(1,tmp.a,tmp.b)
}
sampleObS<-function(Nlat,N,a,b){  ###This function will return variance. Need to sqrt to get SD
n<-length(c(Nlat))
tmp.a<-a+n/2
tmp.b<-b+(0.5*sum((N-Nlat)^2,na.rm=T))
return(rinvgamma(1,tmp.a,tmp.b))
}
sampleLatent<-function(Npred,Nlat,N,G,M,Minv,sig.o,sig.p,tmax) {
###This function sequentially adds info from the different data sources to inform latent state
#zero out
s2<-sig.p^2
o1<-sig.o^2
Vi=0
v=0
#1. Contribution of Observations
Vi=1/o1
v=(N[t,]/o1)
#2. Contribution of previous time step. Not included if we are in the first time step
if(t>1){
mu1<-M%*%(diag(G[t,])%*%Nlat[t-1,])
Vi=Vi+1/s2
v=v+mu1/s2
}
#2. Contribution of previous time step
# should fix G to be matrix
if(t<tmax){
mu2<-Minv%*%(diag(1/G[t+1,])%*%Nlat[t+1,]) ####Here y is arranged year by pixel and X is year by pixel by covariate
Vi=Vi+1/s2
v=v+mu2/s2
}
V<-1/Vi
Nlat_t<-rnorm(length(v),c(V*v),sqrt(V))
return(Nlat_t)
}
UpdateBeta<-function(tmax,b0,b1,Nlat,M,p){ # add X and C to list of arguments
Npred<-matrix(NA,tmax,p)
G<-matrix(NA,tmax,p)
for (t in 2:tmax){
G[t,]<-exp(b0+b1*Nlat[t-1,])
#G[t,]<-exp((b0+X[t,,]*C)+b[1]*Nlat[t-1,])
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
return(list(Npred=Npred,G=G))
}
UpdateDispersal<-function(tmax,tau,Nlat,G,p,D){
Npred<-matrix(NA,tmax,p)
Mint<-exp(-(D/tau))
M<-t(Mint/apply(Mint,1,sum))
for (t in 2:tmax){
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
return(list(Npred=Npred,M=M))
}
###Data####
N<-N[1:31,] # observed data, assumed to be a matrix that is year by pixel (remove last 5 years here)
tmax<-dim(N)[1]
pmax<-dim(N)[2]
D<-Dsq
#X<-if you have covariates this is where they go
bmax<-2 #length(X[1,]) number of covariates
###Starting Values###
Nlat<-N #Starting values for latent states is the observed data
beta0<-.01 ###Give beta some starting values based on what we know
beta1<-0.01
tau<-.1###Give tau a reasonable starting value.
sig.p<-.1##give sig.p reasonable starting values
o1<-sig.o<-1##give sig.o reasonable starting values
ro <- 0.5
qo1 <- (ro/o1)+1
Mint<-exp(-(D/tau))
M<-t(Mint/apply(Mint,1,sum))  ##calculate M starting M given Tau
Npred<-G<-matrix(NA,tmax,pmax)
for (t in 2:tmax){
G[t,]<-exp(beta0+beta1*Nlat[t-1,])
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
Niter<-20000 ###Number of interations. Keep in mind this will need to be more than you needed for stan
checkpoint=Niter*0.01
###Containers####
tauOut<-matrix(NA,Niter,)
betaOut<-matrix(NA,Niter,bmax)
NlatOut<-array(NA,c(tmax,93,Niter)) # change to 93 pixels
NlatOutLast<-matrix(NA,pmax,Niter)
rep.pix <- c(115:145, 910:940, 1865:1895) # representative pixels (high,med,low density)
sig.pOut<-sig.oOut<-matrix(NA,Niter,1)
accept.beta1=accept.beta0=accept.tau=0
#beta.tune=diag(c(.000001,.000001))
beta0.tune=.000001
beta1.tune=.000001
tau.tune=.001
for (i in 1:Niter){
beta0.star=rnorm(1,beta0,beta0.tune)
Out=UpdateBeta(tmax=tmax,b0=beta0.star,b1=beta1,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBeta(tmax=tmax,b0=beta0,b1=beta1,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta0=beta0.star
accept.beta0=accept.beta0+1
}
betaOut[i,1]<-beta0
beta1.star=rnorm(1,beta1,beta1.tune)
Out=UpdateBeta(tmax=tmax,b0=beta0,b1=beta1.star,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBeta(tmax=tmax,b0=beta0,b1=beta1,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta1=beta1.star
accept.beta1=accept.beta1+1
}
betaOut[i,2]<-beta1
tau.star=rnorm(1,tau,tau.tune)
Out=UpdateDispersal(tmax=tmax,tau=tau.star,Nlat=Nlat,G=G,p=p,D=D)
Npred.star<-Out$Npred
M.star<-Out$M
now=UpdateDispersal(tmax=tmax,tau=tau,Nlat=Nlat,G=G,p=p,D=D)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
M=M.star
Minv<-chol2inv(M.star)
tau<-tau.star
accept.tau=accept.tau+1
}
tauOut[i,]<-tau
for (t in 2:tmax){
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
sig.p<-sqrt(sampleSigma(Nlat=c(Nlat[-1,]),Npred=c(Npred[-1,]),a=3,b=.5))
sig.pOut[i,]<-sig.p
#sig.o<-sqrt(sampleObS(Nlat=c(Nlat),N=c(N),a=3,b=.5))
sig.oOut[i,]<-sig.o
for (t in 1:tmax){
Nlat[t,]<-sampleLatent(Npred,Nlat,N,G,M,Minv,sig.o,sig.p,tmax)
}
NlatOut[,,i]<-Nlat[,rep.pix]
NlatOutLast[,i]<-Nlat[tmax,]
print(i)
if(i%%checkpoint==0){
if(accept.beta0/i<0.35) beta0.tune=beta0.tune*.9
if(accept.beta0/i>0.45) beta0.tune=beta0.tune*1.1
if(accept.beta1/i<0.35) beta1.tune=beta1.tune*.9
if(accept.beta1/i>0.45) beta1.tune=beta1.tune*1.1
if(accept.tau/i<0.35) tau.tune=tau.tune*.9
if(accept.tau/i>0.45) tau.tune=tau.tune*1.1
}
}
sampleSigma<-function(Nlat,Npred,a,b){  ###This function will return variance. Need to sqrt to get SD
n<-length(c(Nlat))
tmp.a<-a+n/2
tmp.b<-b+(0.5*sum((Nlat-Npred)^2))
s2=rinvgamma(1,tmp.a,tmp.b)
}
sampleObS<-function(Nlat,N,a,b){  ###This function will return variance. Need to sqrt to get SD
n<-length(c(Nlat))
tmp.a<-a+n/2
tmp.b<-b+(0.5*sum((N-Nlat)^2,na.rm=T))
return(rinvgamma(1,tmp.a,tmp.b))
}
sampleLatent<-function(Npred,Nlat,N,G,M,Minv,sig.o,sig.p,tmax) {
###This function sequentially adds info from the different data sources to inform latent state
#zero out
s2<-sig.p^2
o1<-sig.o^2
Vi=0
v=0
#1. Contribution of Observations
Vi=1/o1
v=(N[t,]/o1)
#2. Contribution of previous time step. Not included if we are in the first time step
if(t>1){
mu1<-M%*%(diag(G[t,])%*%Nlat[t-1,])
Vi=Vi+1/s2
v=v+mu1/s2
}
#2. Contribution of previous time step
# should fix G to be matrix
if(t<tmax){
mu2<-Minv%*%(diag(1/G[t+1,])%*%Nlat[t+1,]) ####Here y is arranged year by pixel and X is year by pixel by covariate
Vi=Vi+1/s2
v=v+mu2/s2
}
V<-1/Vi
Nlat_t<-rnorm(length(v),c(V*v),sqrt(V))
return(Nlat_t)
}
UpdateBeta<-function(tmax,b0,b1,Nlat,M,p){ # add X and C to list of arguments
Npred<-matrix(NA,tmax,p)
G<-matrix(NA,tmax,p)
for (t in 2:tmax){
G[t,]<-exp(b0+b1*Nlat[t-1,])
#G[t,]<-exp((b0+X[t,,]*C)+b[1]*Nlat[t-1,])
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
return(list(Npred=Npred,G=G))
}
UpdateDispersal<-function(tmax,tau,Nlat,G,p,D){
Npred<-matrix(NA,tmax,p)
Mint<-exp(-(D/tau))
M<-t(Mint/apply(Mint,1,sum))
for (t in 2:tmax){
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
return(list(Npred=Npred,M=M))
}
library("splus2R")
