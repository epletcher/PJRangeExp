load("R:/Shriver_Lab/PJspread/evaluate_in_sample/eval_model_insample_5y.RData")
# ---------- SUMMARIZE AND PLOT RMSE ------------------
# average rmse functions
average_rmse <- function(mod) {
rmse <- mod$rmseTotOut
to_return <- data.frame(
avg = median(rmse),
low.cred = quantile(rmse, 0.1),
up.cred = quantile(rmse, 0.9))
return(to_return)
}
average_rmse(for.base.N)
average_rmse(for.topo.N)
average_rmse(for.clim.N)
average_rmse(for.topoclim.N)
normalized_rmse <- function(mod) {
rmse <- mod$rmseTotOut
nrmse <- rmse/(max(N)-min(N))
to_return <- data.frame(
avg = median(nrmse),
low.cred = quantile(nrmse, 0.1),
up.cred = quantile(nrmse, 0.9))
return(to_return)
}
normalized_rmse(for.base.N)
normalized_rmse(for.topo.N)
normalized_rmse(for.clim.N)
normalized_rmse(for.topoclim.N)
## plot RMSE
BASE = for.base.N$rmseTotOut
TOPO = for.topo.N$rmseTotOut
CLIM = for.clim.N$rmseTotOut
TOPOCLIM = for.topoclim.N$rmseTotOut
CLIM = c(CLIM, rep(NA, length(BASE) - length(CLIM)))
TOPOCLIM = c(TOPOCLIM, rep(NA, length(BASE) - length(TOPOCLIM)))
rmsedat <- data.frame(BASE, TOPO, CLIM,TOPOCLIM)
rmsedat %>% pivot_longer(everything(), names_to = "model", values_to = "rmse") %>% ggplot(aes(x = model, y = rmse)) + geom_boxplot(fill = c("#00BFC4","#C77Cff","#F8766D","#7CAE00"), outlier.shape = NA, lwd = 1.2, col = "#36454F") + labs(x = "MODEL", y = "RMSE") + theme_bw() + theme(legend.position="none", text = element_text(size=25))
# load packages
library(tidyverse)
library(abind) # arrays
library(spatstat) # distance matrix w/ pairwise dist. function
library(raster)
library(cowplot)
normalized_rmse <- function(mod) {
rmse <- mod$rmseTotOut
nrmse <- rmse/(max(N)-min(N))
to_return <- data.frame(
avg = median(nrmse),
low.cred = quantile(nrmse, 0.1),
up.cred = quantile(nrmse, 0.9))
return(to_return)
}
normalized_rmse(for.base.N)
normalized_rmse(for.topo.N)
normalized_rmse(for.clim.N)
normalized_rmse(for.topoclim.N)
## plot RMSE
BASE = for.base.N$rmseTotOut
TOPO = for.topo.N$rmseTotOut
CLIM = for.clim.N$rmseTotOut
TOPOCLIM = for.topoclim.N$rmseTotOut
CLIM = c(CLIM, rep(NA, length(BASE) - length(CLIM)))
TOPOCLIM = c(TOPOCLIM, rep(NA, length(BASE) - length(TOPOCLIM)))
rmsedat <- data.frame(BASE, TOPO, CLIM,TOPOCLIM)
rmsedat %>% pivot_longer(everything(), names_to = "model", values_to = "rmse") %>% ggplot(aes(x = model, y = rmse)) + geom_boxplot(fill = c("#00BFC4","#C77Cff","#F8766D","#7CAE00"), outlier.shape = NA, lwd = 1.2, col = "#36454F") + labs(x = "MODEL", y = "RMSE") + theme_bw() + theme(legend.position="none", text = element_text(size=25))
max(N)
rmsedat %>% pivot_longer(everything(), names_to = "model", values_to = "rmse") %>%
mutate(rmse = rmse/max(N)) %>% # normalize rmse values by range of observed data
ggplot(aes(x = model, y = rmse)) +
geom_boxplot(fill = c("#00BFC4","#C77Cff","#F8766D","#7CAE00"), outlier.shape = NA, lwd = 1.2, col = "#36454F") +
labs(x = "MODEL", y = "RMSE") +
theme_bw() +
theme(legend.position="none", text = element_text(size=25))
?round
rmsedat %>% pivot_longer(everything(), names_to = "model", values_to = "rmse") %>%
mutate(rmse = round(rmse/max(N)), 3) %>% # normalize rmse values by range of observed data
ggplot(aes(x = model, y = rmse)) +
geom_boxplot(fill = c("#00BFC4","#C77Cff","#F8766D","#7CAE00"), outlier.shape = NA, lwd = 1.2, col = "#36454F") +
labs(x = "MODEL", y = "RMSE") +
theme_bw() +
theme(legend.position="none", text = element_text(size=25))
rmsedat %>% pivot_longer(everything(), names_to = "model", values_to = "rmse") %>%
mutate(rmse = rmse/max(N)) %>% # normalize rmse values by range of observed data
ggplot(aes(x = model, y = rmse)) +
geom_boxplot(fill = c("#00BFC4","#C77Cff","#F8766D","#7CAE00"), outlier.shape = NA, lwd = 1.2, col = "#36454F") +
labs(x = "MODEL", y = "RMSE") +
theme_bw() +
theme(legend.position="none", text = element_text(size=25))
ggsave("R:/Shriver_Lab/PJspread/figures/rmse-plot_insample_5year_forecast_normalized.png", plot = last_plot(), dpi = 600)
ggsave("R:/Shriver_Lab/PJspread/figures/rmse-plot_insample_5year_forecast_normalized.png", plot = last_plot(), dpi = 400)
# plot
# colors
group.cols <- c("#F8766D","#00BFC4","#C77Cff","#7CAE00")
rmsedat %>% pivot_longer(everything(), names_to = "model", values_to = "rmse") %>%
mutate(rmse = rmse/max(N)) %>% # normalize rmse values by range of observed data
ggplot(aes(x = model, y = rmse, col = model)) +
geom_boxplot(outlier.shape = NA, lwd = 1.2) +
scale_color_manual(values=group.cols) +
labs(x = "MODEL", y = "RMSE") +
theme_bw() +
theme(legend.position="none", text = element_text(size=25))
rmsedat %>% pivot_longer(everything(), names_to = "model", values_to = "rmse") %>%
mutate(rmse = rmse/max(N)) %>% # normalize rmse values by range of observed data
ggplot(aes(x = model, y = rmse, col = model)) +
geom_boxplot(outlier.shape = NA, lwd = 1.2) +
scale_color_manual(values=group.cols) +
labs(x = "MODEL", y = "RMSE") +
theme_bw() +
theme(legend.position="none", text = element_text(size=20))
ggsave("R:/Shriver_Lab/PJspread/figures/rmse-plot_insample_5year_forecast_normalized.png", plot = last_plot(), dpi = 400)
# save to Google drive project folder
ggsave("G:/.shortcut-targets-by-id/1FPlPAVacVgAROSPXMiiOGb2Takzm2241/PJ_Photo/cover_spread/Figures/Final_model_run/rmse-plot_insample_5year_forecast_normalized.png", plot = last_plot(), dpi = 400)
dim(for.topo.N$predOut)
matplot(for.topo.N$predOut[,,5000], type = 'l')
matplot(for.topo.N$predOut[,,4000], type = 'l')
matplot(for.topo.N$predOut[,,2000], type = 'l')
max(for.topo.N$predOut)
min(for.topo.N$predOut)
max(for.base.N$predOut)
min(for.base.N$predOut)
med.pred.topo <- apply(for.topo.N$predOut, MARGIN = c(1,2), FUN = median)
up.pred.topo <- apply(for.topo.N$predOut, MARGIN = c(1,2), FUN = quantile, 0.95)
low.pred.topo <- apply(for.topo.N$predOut, MARGIN = c(1,2), FUN = quantile, 0.05)
plot(med.pred.topo[,702])
plot(med.pred.base[,702])
plot(med.pred.topo[,702], type = 'l')
lines(med.pred.base[,702], col = 'green')
plot(med.pred.topo[,702], type = 'l', ylim = c(10,20))
lines(med.pred.base[,702], col = 'green')
lines(N[32:36,702])
plot(med.pred.topo[,702], type = 'l', ylim = c(10,25))
lines(med.pred.base[,702], col = 'green')
lines(N[32:36,702])
