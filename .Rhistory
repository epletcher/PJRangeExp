accept.beta2=accept.beta2+1
}
betaOut[i,3]<-beta2
tau.star=rnorm(1,tau,tau.tune)
Out=UpdateDispersal(tmax=tmax,tau=tau.star,Nlat=Nlat,G=G,p=p,D=D)
Npred.star<-Out$Npred
M.star<-Out$M
now=UpdateDispersal(tmax=tmax,tau=tau,Nlat=Nlat,G=G,p=p,D=D)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
M=M.star
Minv<-chol2inv(M.star)
tau<-tau.star
accept.tau=accept.tau+1
}
tauOut[i,]<-tau
for (t in 2:tmax){
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
sig.p<-sqrt(sampleSigma(Nlat=c(Nlat[-1,]),Npred=c(Npred[-1,]),a=3,b=.5))
sig.pOut[i,]<-sig.p
#sig.o<-sqrt(sampleObS(Nlat=c(Nlat),N=c(N),a=3,b=.5))
sig.oOut[i,]<-sig.o
for (t in 1:tmax){
Nlat[t,]<-sampleLatent(Npred,Nlat,N,G,M,Minv,sig.o,sig.p,tmax)
}
if(i %in% tenIter) {
NlatOut[,,i/10] <- Nlat}
NlatOutLast[,i]<-Nlat[tmax,]
print(i)
if(i%%checkpoint==0){
if(accept.beta0/i<0.35) beta0.tune=beta0.tune*.9
if(accept.beta0/i>0.45) beta0.tune=beta0.tune*1.1
if(accept.beta1/i<0.35) beta1.tune=beta1.tune*.9
if(accept.beta1/i>0.45) beta1.tune=beta1.tune*1.1
if(accept.beta2/i<0.35) beta2.tune=beta2.tune*.9
if(accept.beta2/i>0.45) beta2.tune=beta2.tune*1.1
if(accept.tau/i<0.35) tau.tune=tau.tune*.9
if(accept.tau/i>0.45) tau.tune=tau.tune*1.1
}
if(i %in% seq(1000,20000, by = 1000)) {
save.image(file = "R:/Shriver_Lab/PJspread/sampleroutput/sampler_base_quad.RData")
}
}
beta0.star=rnorm(1,beta0,beta0.tune)
Out=UpdateBetaQuad(tmax=tmax,b0=beta0.star,b1=beta1,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh1
mh2
beta1.star=rnorm(1,beta1,beta1.tune)
Out=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1.star,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh1
mh2
beta2.star=rnorm(1,beta2,beta2.tune)
Out=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1,b2=beta2.star,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh1
mh2
###Data####
N<-N[1:31,] # observed data, assumed to be a matrix that is year by pixel (remove last 5 years here)
tmax<-dim(N)[1]
pmax<-dim(N)[2]
D<-Dsq
#X<-if you have covariates this is where they go
bmax<-3 #length(X[1,]) number of covariates
###Starting Values###
Nlat<-N #Starting values for latent states is the observed data
beta0<-.019 ###Give beta some starting values based on what we know
beta1<--0.001
beta2 <- -.0001
tau<-.033###Give tau a reasonable starting value.
sig.p<-1.3##give sig.p reasonable starting values
o1<-sig.o<-1##give sig.o reasonable starting values
ro <- 0.5
qo1 <- (ro/o1)+1
Mint<-exp(-(D/tau))
M<-t(Mint/apply(Mint,1,sum))  ##calculate M starting M given Tau
Npred<-G<-matrix(NA,tmax,pmax)
for (t in 2:tmax){
G[t,]<-exp(beta0+beta1*Nlat[t-1,]+beta2*(Nlat[t-1,]^2))
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
Niter<-20000 ###Number of interations. Keep in mind this will need to be more than you needed for stan
checkpoint=Niter*0.01
###Containers####
tauOut<-matrix(NA,Niter,)
betaOut<-matrix(NA,Niter,bmax)
NlatOut<-array(NA,c(tmax,pmax,Niter/10)) # change to all pixels, but only every 10th iteration
NlatOutLast<-matrix(NA,pmax,Niter)
#rep.pix <- c(115:145, 910:940, 1865:1895) # representative pixels (high,med,low density)
tenIter <- seq(10,20000, by = 10) # vector of every 10th iteration
sig.pOut<-sig.oOut<-matrix(NA,Niter,1)
accept.beta2=accept.beta1=accept.beta0=accept.tau=0
#beta.tune=diag(c(.000001,.000001))
beta0.tune=.001
beta1.tune=.001
beta2.tune=.0001
tau.tune=.001
for (i in 1:Niter){ # edit starting iteration if start/stopping
beta0.star=rnorm(1,beta0,beta0.tune)
Out=UpdateBetaQuad(tmax=tmax,b0=beta0.star,b1=beta1,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta0=beta0.star
accept.beta0=accept.beta0+1
}
betaOut[i,1]<-beta0
beta1.star=rnorm(1,beta1,beta1.tune)
Out=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1.star,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta1=beta1.star
accept.beta1=accept.beta1+1
}
betaOut[i,2]<-beta1
beta2.star=rnorm(1,beta2,beta2.tune)
Out=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1,b2=beta2.star,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta2=beta2.star
accept.beta2=accept.beta2+1
}
betaOut[i,3]<-beta2
tau.star=rnorm(1,tau,tau.tune)
Out=UpdateDispersal(tmax=tmax,tau=tau.star,Nlat=Nlat,G=G,p=p,D=D)
Npred.star<-Out$Npred
M.star<-Out$M
now=UpdateDispersal(tmax=tmax,tau=tau,Nlat=Nlat,G=G,p=p,D=D)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
M=M.star
Minv<-chol2inv(M.star)
tau<-tau.star
accept.tau=accept.tau+1
}
tauOut[i,]<-tau
for (t in 2:tmax){
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
sig.p<-sqrt(sampleSigma(Nlat=c(Nlat[-1,]),Npred=c(Npred[-1,]),a=3,b=.5))
sig.pOut[i,]<-sig.p
#sig.o<-sqrt(sampleObS(Nlat=c(Nlat),N=c(N),a=3,b=.5))
sig.oOut[i,]<-sig.o
for (t in 1:tmax){
Nlat[t,]<-sampleLatent(Npred,Nlat,N,G,M,Minv,sig.o,sig.p,tmax)
}
if(i %in% tenIter) {
NlatOut[,,i/10] <- Nlat}
NlatOutLast[,i]<-Nlat[tmax,]
print(i)
if(i%%checkpoint==0){
if(accept.beta0/i<0.35) beta0.tune=beta0.tune*.9
if(accept.beta0/i>0.45) beta0.tune=beta0.tune*1.1
if(accept.beta1/i<0.35) beta1.tune=beta1.tune*.9
if(accept.beta1/i>0.45) beta1.tune=beta1.tune*1.1
if(accept.beta2/i<0.35) beta2.tune=beta2.tune*.9
if(accept.beta2/i>0.45) beta2.tune=beta2.tune*1.1
if(accept.tau/i<0.35) tau.tune=tau.tune*.9
if(accept.tau/i>0.45) tau.tune=tau.tune*1.1
}
if(i %in% seq(1000,20000, by = 1000)) {
save.image(file = "R:/Shriver_Lab/PJspread/sampleroutput/sampler_base_quad.RData")
}
}
plot(betaOut[1:200,1])
plot(betaOut[1:200,1], type = "l")
plot(betaOut[1:200,2], type = "l")
plot(betaOut[1:200,3], type = "l")
for (i in 201:Niter){ # edit starting iteration if start/stopping
beta0.star=rnorm(1,beta0,beta0.tune)
Out=UpdateBetaQuad(tmax=tmax,b0=beta0.star,b1=beta1,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta0=beta0.star
accept.beta0=accept.beta0+1
}
betaOut[i,1]<-beta0
beta1.star=rnorm(1,beta1,beta1.tune)
Out=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1.star,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta1=beta1.star
accept.beta1=accept.beta1+1
}
betaOut[i,2]<-beta1
beta2.star=rnorm(1,beta2,beta2.tune)
Out=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1,b2=beta2.star,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta2=beta2.star
accept.beta2=accept.beta2+1
}
betaOut[i,3]<-beta2
tau.star=rnorm(1,tau,tau.tune)
Out=UpdateDispersal(tmax=tmax,tau=tau.star,Nlat=Nlat,G=G,p=p,D=D)
Npred.star<-Out$Npred
M.star<-Out$M
now=UpdateDispersal(tmax=tmax,tau=tau,Nlat=Nlat,G=G,p=p,D=D)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
M=M.star
Minv<-chol2inv(M.star)
tau<-tau.star
accept.tau=accept.tau+1
}
tauOut[i,]<-tau
for (t in 2:tmax){
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
sig.p<-sqrt(sampleSigma(Nlat=c(Nlat[-1,]),Npred=c(Npred[-1,]),a=3,b=.5))
sig.pOut[i,]<-sig.p
#sig.o<-sqrt(sampleObS(Nlat=c(Nlat),N=c(N),a=3,b=.5))
sig.oOut[i,]<-sig.o
for (t in 1:tmax){
Nlat[t,]<-sampleLatent(Npred,Nlat,N,G,M,Minv,sig.o,sig.p,tmax)
}
if(i %in% tenIter) {
NlatOut[,,i/10] <- Nlat}
NlatOutLast[,i]<-Nlat[tmax,]
print(i)
if(i%%checkpoint==0){
if(accept.beta0/i<0.35) beta0.tune=beta0.tune*.9
if(accept.beta0/i>0.45) beta0.tune=beta0.tune*1.1
if(accept.beta1/i<0.35) beta1.tune=beta1.tune*.9
if(accept.beta1/i>0.45) beta1.tune=beta1.tune*1.1
if(accept.beta2/i<0.35) beta2.tune=beta2.tune*.9
if(accept.beta2/i>0.45) beta2.tune=beta2.tune*1.1
if(accept.tau/i<0.35) tau.tune=tau.tune*.9
if(accept.tau/i>0.45) tau.tune=tau.tune*1.1
}
if(i %in% seq(1000,20000, by = 1000)) {
save.image(file = "R:/Shriver_Lab/PJspread/sampleroutput/sampler_base_quad.RData")
}
}
plot(betaOut[,1], type = "l")
plot(betaOut[,2], type = "l")
plot(betaOut[,3], type = "l")
plot(tauOut[], type = "l")
plot(betaOut[,1], type = "l")
plot(betaOut[7000:9000,1], type = "l")
plot(betaOut[7000:9000,2], type = "l")
plot(betaOut[7000:9000,3], type = "l")
plot(exp(mean(betaOut[7000:9000,1])+mean(betaOut[7000:9000,2])*(1:30)+mean(betaOut[7000:9000,3])*(1:30^2)))
plot(exp(mean(betaOut[7000:9000,1])+mean(betaOut[7000:9000,2])*(1:30)+mean(betaOut[7000:9000,3])*(1:30)^2)))
plot(exp(mean(betaOut[7000:9000,1])+mean(betaOut[7000:9000,2])*(1:30)+mean(betaOut[7000:9000,3])*(1:30)^2))
for (i in 9283:Niter){ # edit starting iteration if start/stopping
beta0.star=rnorm(1,beta0,beta0.tune)
Out=UpdateBetaQuad(tmax=tmax,b0=beta0.star,b1=beta1,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta0=beta0.star
accept.beta0=accept.beta0+1
}
betaOut[i,1]<-beta0
beta1.star=rnorm(1,beta1,beta1.tune)
Out=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1.star,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta1=beta1.star
accept.beta1=accept.beta1+1
}
betaOut[i,2]<-beta1
beta2.star=rnorm(1,beta2,beta2.tune)
Out=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1,b2=beta2.star,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta2=beta2.star
accept.beta2=accept.beta2+1
}
betaOut[i,3]<-beta2
tau.star=rnorm(1,tau,tau.tune)
Out=UpdateDispersal(tmax=tmax,tau=tau.star,Nlat=Nlat,G=G,p=p,D=D)
Npred.star<-Out$Npred
M.star<-Out$M
now=UpdateDispersal(tmax=tmax,tau=tau,Nlat=Nlat,G=G,p=p,D=D)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
M=M.star
Minv<-chol2inv(M.star)
tau<-tau.star
accept.tau=accept.tau+1
}
tauOut[i,]<-tau
for (t in 2:tmax){
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
sig.p<-sqrt(sampleSigma(Nlat=c(Nlat[-1,]),Npred=c(Npred[-1,]),a=3,b=.5))
sig.pOut[i,]<-sig.p
#sig.o<-sqrt(sampleObS(Nlat=c(Nlat),N=c(N),a=3,b=.5))
sig.oOut[i,]<-sig.o
for (t in 1:tmax){
Nlat[t,]<-sampleLatent(Npred,Nlat,N,G,M,Minv,sig.o,sig.p,tmax)
}
if(i %in% tenIter) {
NlatOut[,,i/10] <- Nlat}
NlatOutLast[,i]<-Nlat[tmax,]
print(i)
if(i%%checkpoint==0){
if(accept.beta0/i<0.35) beta0.tune=beta0.tune*.9
if(accept.beta0/i>0.45) beta0.tune=beta0.tune*1.1
if(accept.beta1/i<0.35) beta1.tune=beta1.tune*.9
if(accept.beta1/i>0.45) beta1.tune=beta1.tune*1.1
if(accept.beta2/i<0.35) beta2.tune=beta2.tune*.9
if(accept.beta2/i>0.45) beta2.tune=beta2.tune*1.1
if(accept.tau/i<0.35) tau.tune=tau.tune*.9
if(accept.tau/i>0.45) tau.tune=tau.tune*1.1
}
if(i %in% seq(1000,20000, by = 1000)) {
save.image(file = "R:/Shriver_Lab/PJspread/sampleroutput/sampler_base_quad.RData")
}
}
plot(exp(mean(betaOut[10000:14000,1])+mean(betaOut[10000:14000,2])*(1:30)+mean(betaOut[10000:14000,3])*(1:30)^2))
plot(betaOut[10000:14000,1], type = "l")
plot(betaOut[10000:14000,2], type = "l")
plot(betaOut[10000:14000,3], type = "l")
plot(tauOut[10000:14000], type = "l")
plot(sig.pOut[10000:14000], type = "l")
plot(betaOut[1000:14000,1], type = "l")
plot(betaOut[1000:14000,2], type = "l")
plot(betaOut[1000:14000,3], type = "l")
for (i in 14209:Niter){ # edit starting iteration if start/stopping
beta0.star=rnorm(1,beta0,beta0.tune)
Out=UpdateBetaQuad(tmax=tmax,b0=beta0.star,b1=beta1,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta0=beta0.star
accept.beta0=accept.beta0+1
}
betaOut[i,1]<-beta0
beta1.star=rnorm(1,beta1,beta1.tune)
Out=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1.star,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta1=beta1.star
accept.beta1=accept.beta1+1
}
betaOut[i,2]<-beta1
beta2.star=rnorm(1,beta2,beta2.tune)
Out=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1,b2=beta2.star,Nlat=Nlat,M=M,p=p)
Npred.star<-Out$Npred
G.star<-Out$G
now=UpdateBetaQuad(tmax=tmax,b0=beta0,b1=beta1,b2=beta2,Nlat=Nlat,M=M,p=p)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
G=G.star
beta2=beta2.star
accept.beta2=accept.beta2+1
}
betaOut[i,3]<-beta2
tau.star=rnorm(1,tau,tau.tune)
Out=UpdateDispersal(tmax=tmax,tau=tau.star,Nlat=Nlat,G=G,p=p,D=D)
Npred.star<-Out$Npred
M.star<-Out$M
now=UpdateDispersal(tmax=tmax,tau=tau,Nlat=Nlat,G=G,p=p,D=D)
Npred<-now$Npred
mh1=sum(dnorm(Nlat[-1,],(Npred.star[-1,]),sig.p,log=TRUE)) #implied uniform prior
mh2=sum(dnorm(Nlat[-1,],(Npred[-1,]),sig.p,log=TRUE))      #implied uniform prior
mh=min(exp(mh1-mh2),1)
if(mh>runif(1)){
M=M.star
Minv<-chol2inv(M.star)
tau<-tau.star
accept.tau=accept.tau+1
}
tauOut[i,]<-tau
for (t in 2:tmax){
Npred[t,]<-M%*%(diag(G[t,])%*%Nlat[t-1,])
}
sig.p<-sqrt(sampleSigma(Nlat=c(Nlat[-1,]),Npred=c(Npred[-1,]),a=3,b=.5))
sig.pOut[i,]<-sig.p
#sig.o<-sqrt(sampleObS(Nlat=c(Nlat),N=c(N),a=3,b=.5))
sig.oOut[i,]<-sig.o
for (t in 1:tmax){
Nlat[t,]<-sampleLatent(Npred,Nlat,N,G,M,Minv,sig.o,sig.p,tmax)
}
if(i %in% tenIter) {
NlatOut[,,i/10] <- Nlat}
NlatOutLast[,i]<-Nlat[tmax,]
print(i)
if(i%%checkpoint==0){
if(accept.beta0/i<0.35) beta0.tune=beta0.tune*.9
if(accept.beta0/i>0.45) beta0.tune=beta0.tune*1.1
if(accept.beta1/i<0.35) beta1.tune=beta1.tune*.9
if(accept.beta1/i>0.45) beta1.tune=beta1.tune*1.1
if(accept.beta2/i<0.35) beta2.tune=beta2.tune*.9
if(accept.beta2/i>0.45) beta2.tune=beta2.tune*1.1
if(accept.tau/i<0.35) tau.tune=tau.tune*.9
if(accept.tau/i>0.45) tau.tune=tau.tune*1.1
}
if(i %in% seq(1000,20000, by = 1000)) {
save.image(file = "R:/Shriver_Lab/PJspread/sampleroutput/sampler_base_quad.RData")
}
}
plot(betaOut[10000:20000,1], type = "l")
plot(betaOut[1:20000,1], type = "l")
plot(betaOut[1:20000,2], type = "l")
plot(betaOut[1:20000,3], type = "l")
plot(sig.pOut[1:20000,3], type = "l")
plot(sig.pOut[1:20000], type = "l")
plot(tauOut[1:20000], type = "l")
plot(betaOut[1:20000,1], type = "l")
plot(betaOut[1:20000,2], type = "l")
plot(betaOut[1:20000,3], type = "l")
plot(exp(mean(betaOut[15000:20000,1])+mean(betaOut[15000:20000,2])*(1:30)+mean(betaOut[15000:20000,3])*(1:30)^2))
